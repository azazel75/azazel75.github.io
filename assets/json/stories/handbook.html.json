{
  "abs_permalink": "http://getnikola.com/stories/handbook.html",
  "template_name": "story.tmpl",
  "meta": {
    "description": "",
    "title": "The Nikola Handbook",
    "tags": "mathjax",
    "annotations": "",
    "keywords": "",
    "author": "",
    "template": "",
    "date": "2012-03-30 23:00:00 UTC-03:00",
    "password": "",
    "type": "text",
    "slug": "handbook"
  },
  "sourcelink": "/stories/handbook.rst",
  "id": "/stories/handbook.html.json",
  "author": "Nikola Tesla",
  "use_in_feeds": false,
  "translated_to": [],
  "text": "<div><table class=\"docinfo\" frame=\"void\" rules=\"none\">\n<col class=\"docinfo-name\">\n<col class=\"docinfo-content\">\n<tbody valign=\"top\">\n<tr><th class=\"docinfo-name\">Version:</th>\n<td>7.1.0</td></tr>\n</tbody>\n</table>\n<div class=\"contents alert alert-info pull-right topic\" id=\"contents\">\n<p class=\"topic-title first\">Contents</p>\n<ul class=\"simple\">\n<li><a class=\"reference internal\" href=\"/stories/handbook.html#all-you-need-to-know\" id=\"id8\">All You Need to Know</a></li>\n<li><a class=\"reference internal\" href=\"/stories/handbook.html#what-s-nikola-and-what-can-you-do-with-it\" id=\"id9\">What's Nikola and what can you do with it?</a></li>\n<li><a class=\"reference internal\" href=\"/stories/handbook.html#getting-help\" id=\"id10\">Getting Help</a></li>\n<li><a class=\"reference internal\" href=\"/stories/handbook.html#why-static\" id=\"id11\">Why Static?</a></li>\n<li><a class=\"reference internal\" href=\"/stories/handbook.html#features\" id=\"id12\">Features</a></li>\n<li><a class=\"reference internal\" href=\"/stories/handbook.html#installing-nikola\" id=\"id13\">Installing Nikola</a><ul>\n<li><a class=\"reference internal\" href=\"/stories/handbook.html#libxml-libxslt-errors\" id=\"id14\">libxml/libxslt errors</a></li>\n<li><a class=\"reference internal\" href=\"/stories/handbook.html#python-h-not-found\" id=\"id15\">Python.h not found</a></li>\n<li><a class=\"reference internal\" href=\"/stories/handbook.html#installation-on-linux-mac-os-x-bsd-and-any-other-posix-compatible-os\" id=\"id16\">Installation on Linux, Mac OS X, *BSD, and any other POSIX-compatible OS</a></li>\n<li><a class=\"reference internal\" href=\"/stories/handbook.html#installation-on-windows-and-windows-support\" id=\"id17\">Installation on Windows and Windows support</a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"/stories/handbook.html#getting-started\" id=\"id18\">Getting Started</a></li>\n<li><a class=\"reference internal\" href=\"/stories/handbook.html#creating-a-blog-post\" id=\"id19\">Creating a Blog Post</a><ul>\n<li><a class=\"reference internal\" href=\"/stories/handbook.html#teasers\" id=\"id20\">Teasers</a></li>\n<li><a class=\"reference internal\" href=\"/stories/handbook.html#drafts\" id=\"id21\">Drafts</a></li>\n<li><a class=\"reference internal\" href=\"/stories/handbook.html#private-formerly-retired-posts\" id=\"id22\">Private (formerly retired) Posts</a></li>\n<li><a class=\"reference internal\" href=\"/stories/handbook.html#queuing-posts\" id=\"id23\">Queuing Posts</a></li>\n<li><a class=\"reference internal\" href=\"/stories/handbook.html#post-types\" id=\"id24\">Post Types</a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"/stories/handbook.html#creating-a-page\" id=\"id25\">Creating a Page</a></li>\n<li><a class=\"reference internal\" href=\"/stories/handbook.html#redirections\" id=\"id26\">Redirections</a></li>\n<li><a class=\"reference internal\" href=\"/stories/handbook.html#configuration\" id=\"id27\">Configuration</a></li>\n<li><a class=\"reference internal\" href=\"/stories/handbook.html#customizing-your-site\" id=\"id28\">Customizing Your Site</a></li>\n<li><a class=\"reference internal\" href=\"/stories/handbook.html#adding-files\" id=\"id29\">Adding Files</a></li>\n<li><a class=\"reference internal\" href=\"/stories/handbook.html#getting-more-themes\" id=\"id30\">Getting More Themes</a></li>\n<li><a class=\"reference internal\" href=\"/stories/handbook.html#deployment\" id=\"id31\">Deployment</a><ul>\n<li><a class=\"reference internal\" href=\"/stories/handbook.html#deploying-to-github\" id=\"id32\">Deploying to GitHub</a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"/stories/handbook.html#comments-and-annotations\" id=\"id33\">Comments and Annotations</a></li>\n<li><a class=\"reference internal\" href=\"/stories/handbook.html#image-galleries\" id=\"id34\">Image Galleries</a></li>\n<li><a class=\"reference internal\" href=\"/stories/handbook.html#post-processing-filters\" id=\"id35\">Post Processing Filters</a></li>\n<li><a class=\"reference internal\" href=\"/stories/handbook.html#optimizing-your-website\" id=\"id36\">Optimizing Your Website</a></li>\n<li><a class=\"reference internal\" href=\"/stories/handbook.html#restructuredtext-extensions\" id=\"id37\">reStructuredText Extensions</a><ul>\n<li><a class=\"reference internal\" href=\"/stories/handbook.html#mathjax\" id=\"id38\">MathJax</a></li>\n<li><a class=\"reference internal\" href=\"/stories/handbook.html#media\" id=\"id39\">Media</a></li>\n<li><a class=\"reference internal\" href=\"/stories/handbook.html#youtube\" id=\"id40\">YouTube</a></li>\n<li><a class=\"reference internal\" href=\"/stories/handbook.html#vimeo\" id=\"id41\">Vimeo</a></li>\n<li><a class=\"reference internal\" href=\"/stories/handbook.html#soundcloud\" id=\"id42\">Soundcloud</a></li>\n<li><a class=\"reference internal\" href=\"/stories/handbook.html#code\" id=\"id43\">Code</a></li>\n<li><a class=\"reference internal\" href=\"/stories/handbook.html#listing\" id=\"id44\">Listing</a></li>\n<li><a class=\"reference internal\" href=\"/stories/handbook.html#gist\" id=\"id45\">Gist</a></li>\n<li><a class=\"reference internal\" href=\"/stories/handbook.html#slideshows\" id=\"id46\">Slideshows</a></li>\n<li><a class=\"reference internal\" href=\"/stories/handbook.html#chart\" id=\"id47\">Chart</a></li>\n<li><a class=\"reference internal\" href=\"/stories/handbook.html#doc\" id=\"id48\">Doc</a></li>\n<li><a class=\"reference internal\" href=\"/stories/handbook.html#post-list\" id=\"id49\">Post List</a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"/stories/handbook.html#importing-your-wordpress-site-into-nikola\" id=\"id50\">Importing Your WordPress Site Into Nikola</a><ul>\n<li><a class=\"reference internal\" href=\"/stories/handbook.html#importing-to-a-custom-location-or-into-an-existing-site\" id=\"id51\">Importing To A Custom Location Or Into An Existing Site</a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"/stories/handbook.html#using-twitter-cards\" id=\"id52\">Using Twitter Cards</a></li>\n<li><a class=\"reference internal\" href=\"/stories/handbook.html#custom-plugins\" id=\"id53\">Custom Plugins</a></li>\n<li><a class=\"reference internal\" href=\"/stories/handbook.html#getting-extra-plugins\" id=\"id54\">Getting Extra Plugins</a></li>\n<li><a class=\"reference internal\" href=\"/stories/handbook.html#shell-tab-completion\" id=\"id55\">Shell Tab Completion</a></li>\n<li><a class=\"reference internal\" href=\"/stories/handbook.html#license\" id=\"id56\">License</a></li>\n</ul>\n</div>\n<div class=\"section\" id=\"all-you-need-to-know\">\n<h2><a class=\"toc-backref\" href=\"/stories/handbook.html#id8\">All You Need to Know</a></h2>\n<p>After you have Nikola <a class=\"reference external\" href=\"/stories/handbook.html#installing-nikola\">installed</a>:</p>\n<dl class=\"docutils\">\n<dt>Create a empty site (with a setup wizard):</dt>\n<dd><tt class=\"docutils literal\">nikola init mysite</tt></dd>\n</dl>\n<p>You can create a site with demo files in it with <tt class=\"docutils literal\">nikola init <span class=\"pre\">--demo</span> mysite</tt></p>\n<p>The rest of these commands have to be executed inside the new <tt class=\"docutils literal\">mysite</tt> folder.</p>\n<dl class=\"docutils\">\n<dt>Create a post:</dt>\n<dd><tt class=\"docutils literal\">nikola new_post</tt></dd>\n<dt>Edit the post:</dt>\n<dd>The filename should be in the output of the previous command.</dd>\n<dt>Build the site:</dt>\n<dd><tt class=\"docutils literal\">nikola build</tt></dd>\n<dt>Start the test server:</dt>\n<dd><tt class=\"docutils literal\">nikola serve</tt></dd>\n<dt>See the site:</dt>\n<dd><a class=\"reference external\" href=\"http://127.0.0.1:8000\">http://127.0.0.1:8000</a></dd>\n</dl>\n<p>That should get you going. If you want to know more, this manual will always be here\nfor you.</p>\n<p>DON'T READ THIS MANUAL. IF YOU NEED TO READ IT I FAILED, JUST USE THE THING.</p>\n<p>On the other hand, if anything about Nikola is not as obvious as it should be, by all\nmeans tell me about it :-)</p>\n</div>\n<div class=\"section\" id=\"what-s-nikola-and-what-can-you-do-with-it\">\n<h2><a class=\"toc-backref\" href=\"/stories/handbook.html#id9\">What's Nikola and what can you do with it?</a></h2>\n<p>Nikola is a static website and blog generator. The very short explanation is\nthat it takes some texts you wrote, and uses them to create a folder full\nof HTML files. If you upload that folder to a server, you will have a\nrather full-featured website, done with little effort.</p>\n<p>It's original goal is to create blogs, but it supports most kind of sites, and\ncan be used as a CMS, as long as what you present to the user is your own content\ninstead of something the user generates.</p>\n<p>Nikola can do:</p>\n<ul class=\"simple\">\n<li>A blog (<a class=\"reference external\" href=\"http://ralsina.me\">example</a>)</li>\n<li>Your company's site</li>\n<li>Your personal site</li>\n<li>A software project's site (<a class=\"reference external\" href=\"http://getnikola.com\">example</a>)</li>\n<li>A book's site</li>\n</ul>\n<p>Since Nikola-based sites don't run any code on the server, there is no way to process\nuser input in forms.</p>\n<p>Nikola can't do:</p>\n<ul class=\"simple\">\n<li>Twitter</li>\n<li>Facebook</li>\n<li>An Issue tracker</li>\n<li>Anything with forms, really (except for <a class=\"reference external\" href=\"/stories/handbook.html#comments-and-annotations\">comments</a>!)</li>\n</ul>\n<p>Keep in mind that \"static\" doesn't mean <strong>boring</strong>. You can have animations, slides\nor whatever fancy CSS/HTML5 thingie you like. It only means all that HTML is\ngenerated already before being uploaded. On the other hand, Nikola sites will\ntend to be content-heavy. What Nikola is good at is at putting what you write\nout there.</p>\n</div>\n<div class=\"section\" id=\"getting-help\">\n<h2><a class=\"toc-backref\" href=\"/stories/handbook.html#id10\">Getting Help</a></h2>\n<p class=\"lead\"><a class=\"reference external\" href=\"http://getnikola.com/contact.html\">Get help here!</a></p>\n<p>TL;DR:</p>\n<ul class=\"simple\">\n<li>You can file bugs at <a class=\"reference external\" href=\"https://github.com/getnikola/nikola/issues\">the issue tracker</a></li>\n<li>You can discuss Nikola at the <a class=\"reference external\" href=\"http://groups.google.com/group/nikola-discuss\">nikola-discuss google group</a></li>\n<li>You can subscribe to <a class=\"reference external\" href=\"http://getnikola.com/blog\">the Nikola Blog</a></li>\n<li>You can follow <a class=\"reference external\" href=\"https://twitter.com/GetNikola\">Nikola on Twitter</a></li>\n</ul>\n</div>\n<div class=\"section\" id=\"why-static\">\n<h2><a class=\"toc-backref\" href=\"/stories/handbook.html#id11\">Why Static?</a></h2>\n<p>Most \"modern\" websites are <em>dynamic</em> in the sense that the contents of the site\nlive in a database, and are converted into presentation-ready HTML only when a\nuser wants to see the page. That's great. However, it presents some minor issues\nthat static site generators try to solve.</p>\n<p>In a static site, the whole site, every page, <em>everything</em>, is created before\nthe first user even sees it and uploaded to the server as a simple folder full\nof HTML files (and images, CSS, etc).</p>\n<p>So, let's see some reasons for using static sites:</p>\n<dl class=\"docutils\">\n<dt>Security</dt>\n<dd><p class=\"first\">Dynamic sites are prone to experience security issues. The solution for that\nis constant vigilance, keeping the software behind the site updated, and\nplain old good luck. The stack of software used to provide a static site,\nlike those Nikola generates, is much smaller (Just a web server).</p>\n<p class=\"last\">A smaller software stack implies less security risk.</p>\n</dd>\n<dt>Obsolescense</dt>\n<dd><p class=\"first\">If you create a site using (for example) WordPress, what happens when WordPress\nreleases a new version? You have to update your WordPress. That is not optional,\nbecause of security and support issues. If I release a new version of Nikola, and\nyou don't update, <em>nothing</em> happens. You can continue to use the version you\nhave now forever, no problems.</p>\n<p>Also, in the longer term, the very foundations of dynamic sites shift. Can you\nstill deploy a blog software based on Django 0.96? What happens when your\nhost stops supporting the php version you rely on? And so on.</p>\n<p>You may say those are long term issues, or that they won't matter for years. Well,\nI believe things should work forever, or as close to it as we can make them.\nNikola's static output and its input files will work as long as you can install\na Python &gt; 2.6 in a Linux, Windows, or Mac and can find a server\nthat sends files over HTTP. That's probably 10 or 15 years at least.</p>\n<p class=\"last\">Also, static sites are easily handled by the Internet Archive.</p>\n</dd>\n<dt>Cost and Performance</dt>\n<dd><p class=\"first\">On dynamic sites, every time a reader wants a page, a whole lot of database\nqueries are made. Then a whole pile of code chews that data, and HTML is\nproduced, which is sent to the user. All that requires CPU and memory.</p>\n<p class=\"last\">On a static site, the highly optimized HTTP server reads the file from disk\n(or, if it's a popular file, from disk cache), and sends it to the user. You could\nprobably serve a bazillion (technical term) pageviews from a phone using\nstatic sites.</p>\n</dd>\n<dt>Lock-in</dt>\n<dd><p class=\"first\">On server-side blog platforms, sometimes you can't export your own data, or\nit's in strange formats you can't use in other services. I have switched\nblogging platforms from Advogato to PyCs to two homebrew systems, to Nikola,\nand have never lost a file, a URL, or a comment. That's because I have <em>always</em>\nhad my own data in a format of my choice.</p>\n<p class=\"last\">With Nikola, you own your files, and you can do anything with them.</p>\n</dd>\n</dl>\n</div>\n<div class=\"section\" id=\"features\">\n<h2><a class=\"toc-backref\" href=\"/stories/handbook.html#id12\">Features</a></h2>\n<p>Nikola has a very defined feature set: it has every feature I needed for my own sites.\nHopefully, it will be enough for others, and anyway, I am open to suggestions.</p>\n<p>If you want to create a blog or a site, Nikola provides:</p>\n<ul class=\"simple\">\n<li>Front page (and older posts pages)</li>\n<li>RSS Feeds</li>\n<li>Pages and feeds for each tag you used</li>\n<li>Custom search</li>\n<li>Full yearly archives</li>\n<li>Custom output paths for generated pages</li>\n<li>Easy page template customization</li>\n<li>Static pages (not part of the blog)</li>\n<li>Internationalization support (my own blog is English/Spanish)</li>\n<li>Google sitemap generation</li>\n<li>Custom deployment (if it's a command, you can use it)</li>\n<li>A (very) basic look and feel you can customize, and is even text-mode friendly</li>\n<li>The input format is light markup (<a class=\"reference external\" href=\"http://getnikola.com/quickstart.html\">reStructuredText</a> or\n<a class=\"reference external\" href=\"http://daringfireball.net/projects/markdown/\">Markdown</a>)</li>\n<li>Easy-to-create image galleries</li>\n<li>Support for displaying source code</li>\n<li>Image slideshows</li>\n<li>Client-side cloud tags</li>\n</ul>\n<p>Also:</p>\n<ul class=\"simple\">\n<li>A preview web server</li>\n<li>\"Live\" re-rendering while you edit</li>\n<li>\"Smart\" builds: only what changed gets rebuilt (usually in seconds)</li>\n<li>Easy to extend with minimal Python knowledge.</li>\n</ul>\n</div>\n<div class=\"section\" id=\"installing-nikola\">\n<h2><a class=\"toc-backref\" href=\"/stories/handbook.html#id13\">Installing Nikola</a></h2>\n<p>This is currently lacking on detail. Considering the niche Nikola is aimed at,\nI suspect that's not a problem yet. So, when I say \"get\", the specific details\nof how to \"get\" something for your specific operating system are left to you.</p>\n<p>The short version is:</p>\n<pre class=\"literal-block\">\npip install nikola\n</pre>\n<p>Note that you need Python v2.6 or newer OR v3.3 or newer.</p>\n<p>Some features require <strong>extra dependencies</strong>.  You can install them all in bulk\nby doing:</p>\n<pre class=\"literal-block\">\npip install nikola[extras]\n</pre>\n<p>Alternatively, you can install those packages one-by-one, when required (Nikola\nwill tell you what packages are needed)</p>\n<p>After that, run <tt class=\"docutils literal\">nikola init <span class=\"pre\">--demo</span> sitename</tt> and that will run the setup\nwizard, which will create a folder called <tt class=\"docutils literal\">sitename</tt> containing a functional\ndemo site.</p>\n<p>Nikola is packaged for some Linux distributions, you may get that instead. e.g.\nIf you are running Arch Linux, there are AUR packages, available in Python 2/3\nand stable/git master flavors: <a class=\"reference external\" href=\"https://aur.archlinux.org/packages/python-nikola/\">python-nikola</a> / <a class=\"reference external\" href=\"https://aur.archlinux.org/packages/python2-nikola/\">python2-nikola</a> for the\nlatest stable release or <a class=\"reference external\" href=\"https://aur.archlinux.org/packages/python-nikola-git/\">python-nikola-git</a> / <a class=\"reference external\" href=\"https://aur.archlinux.org/packages/python2-nikola-git/\">python2-nikola-git</a> for the\nGitHub master.  (only one package may be installed at the same time.)</p>\n<div class=\"section\" id=\"libxml-libxslt-errors\">\n<h3><a class=\"toc-backref\" href=\"/stories/handbook.html#id14\">libxml/libxslt errors</a></h3>\n<p>If you get a <tt class=\"docutils literal\">ERROR: /bin/sh: 1: <span class=\"pre\">xslt-config:</span> not found</tt> or <tt class=\"docutils literal\">fatal error:\nlibxml/xmlversion.h: No such file or directory</tt> when running <tt class=\"docutils literal\">pip install <span class=\"pre\">-r</span> requirements.txt</tt>, install <em>libxml</em> and <em>libxslt</em> libraries, like so:</p>\n<p>Debian systems:</p>\n<pre class=\"literal-block\">\nsudo apt-get install libxml2-dev\nsudo apt-get install libxslt1-dev\n</pre>\n<p>Red Hat/RPM-based systems:</p>\n<pre class=\"literal-block\">\nsudo yum install libxslt-devel libxml2-devel\n</pre>\n</div>\n<div class=\"section\" id=\"python-h-not-found\">\n<h3><a class=\"toc-backref\" href=\"/stories/handbook.html#id15\">Python.h not found</a></h3>\n<p>If you get an error to the effect of <tt class=\"docutils literal\">Python.h not found</tt>, you need to\ninstall development packages for Python.</p>\n<p>Debian systems:</p>\n<pre class=\"literal-block\">\nsudo apt-get install python-dev\n</pre>\n<p>Red Hat/RPM-based systems:</p>\n<pre class=\"literal-block\">\nsudo yum install python-devel\n</pre>\n<p>Note that many other distros/operating systems (including Arch Linux,\n*BSD and OS X) do not require such packages, as C headers are included\nwith the base distribution of Python.</p>\n</div>\n<div class=\"section\" id=\"installation-on-linux-mac-os-x-bsd-and-any-other-posix-compatible-os\">\n<h3><a class=\"toc-backref\" href=\"/stories/handbook.html#id16\">Installation on Linux, Mac OS X, *BSD, and any other POSIX-compatible OS</a></h3>\n<p>(we obviously support all.)</p>\n<p>Using <tt class=\"docutils literal\">pip</tt> should suffice.  You may also want to use distribution- or\nsystem-specific packages for our dependencies.</p>\n<p>There are <strong>no known issues or caveats</strong> on those OSes.  Keep in mind that most\nof our developers run Linux on a daily basis and may not have the full\nknowledge required to resolve issues relating to your operating system.</p>\n</div>\n<div class=\"section\" id=\"installation-on-windows-and-windows-support\">\n<h3><a class=\"toc-backref\" href=\"/stories/handbook.html#id17\">Installation on Windows and Windows support</a></h3>\n<p>Nikola supports Windows!  Keep in mind, though, that there are some\ncaveats:</p>\n<ol class=\"arabic simple\">\n<li><tt class=\"docutils literal\">lxml</tt> and <tt class=\"docutils literal\">Pillow</tt> require compiled extensions.  Compiling them on\nWindows is hard for most people.  Fortunately, compiled packages exist.\nCheck their <a class=\"reference external\" href=\"https://pypi.python.org/\">PyPI</a> pages to find official packages,\n<a class=\"reference external\" href=\"http://www.lfd.uci.edu/~gohlke/pythonlibs/\">the unofficial Gohlke binaries</a>\nsite, or get them somewhere else.  If you are using virtualenvs, using those\npre-built packages is possible through <tt class=\"docutils literal\">virtualenv <span class=\"pre\">--system-site-packages</span></tt>.</li>\n<li>Windows has some differences over POSIX, which may cause some features to\nwork incorrectly under Windows.  If any problems occur, please do not\nhesitate to report them.  Some of the differences include:<ul>\n<li><tt class=\"docutils literal\">\\</tt> as path separator (instead of <tt class=\"docutils literal\">/</tt>)</li>\n<li>the concept of HDD partitions and letters (instead of\nseamless mounting under one root)</li>\n<li>some characters in paths are disallowed (although this shouldn’t cause\nproblems)</li>\n<li>CR+LF (aka <tt class=\"docutils literal\">\\r\\n</tt>) as the line separator (instead of LF <tt class=\"docutils literal\">\\n</tt>)</li>\n</ul>\n</li>\n<li>Most of our developers run Linux on a daily basis and may not have the full\nknowledge required to resolve issues relating to Windows.</li>\n</ol>\n</div>\n</div>\n<div class=\"section\" id=\"getting-started\">\n<h2><a class=\"toc-backref\" href=\"/stories/handbook.html#id18\">Getting Started</a></h2>\n<p>To create posts and pages in Nikola, you write them in one of the supported input formats.\nThose source files are later converted to HTML\nThe recommended formats are reStructuredText and Markdown, but there is also support\nfor textile and WikiCreole and even for just writing HTML.</p>\n<div class=\"note\">\n<p class=\"first admonition-title\">Note</p>\n<p class=\"last\">There is a great <a class=\"reference external\" href=\"http://getnikola.com/quickstart.html\">quick tutorial to learn reStructuredText.</a></p>\n</div>\n<p>First, let's see how you \"build\" your site. Nikola comes with a minimal site to get you started.</p>\n<p>The tool used to do builds is called <a class=\"reference external\" href=\"http://pydoit.org\">doit</a>, and it rebuilds the\nfiles that are not up to date, so your site always reflects your latest content. To do our\nfirst build, just run \"nikola build\":</p>\n<pre class=\"literal-block\">\n$ nikola build\nScanning posts....done!\n.  render_posts:stories/manual.html\n.  render_posts:posts/1.html\n.  render_posts:stories/1.html\n.  render_archive:output/2012/index.html\n.  render_archive:output/archive.html\n.  render_indexes:output/index.html\n.  render_pages:output/posts/welcome-to-nikola.html\n.  render_pages:output/stories/about-nikola.html\n.  render_pages:output/stories/handbook.html\n.  render_rss:output/rss.xml\n.  render_sources:output/stories/about-nikola.txt\n⋮\n⋮\n⋮\n</pre>\n<p>Nikola will print a line for every output file it generates. If we do it again, that\nwill be much much shorter:</p>\n<pre class=\"literal-block\">\n$ nikola build\nScanning posts....done!\n</pre>\n<p>That is because <a class=\"reference external\" href=\"http://pydoit.org\">doit</a> is smart enough not to generate\nall the pages again, unless you changed something that the page requires. So, if you change\nthe text of a post, or its title, that post page, and all index pages where it is mentioned,\nwill be recreated. If you change the post page template, then all the post pages will be rebuilt.</p>\n<p>Nikola is mostly a series of doit <em>tasks</em>, and you can see them by doing <tt class=\"docutils literal\">nikola list</tt>:</p>\n<pre class=\"literal-block\">\n$ nikola list\nScanning posts....done!\nbuild_bundles\ncopy_assets\ncopy_files\ndeploy\nredirect\nrender_archive\nrender_galleries\nrender_indexes\nrender_listings\nrender_pages\nrender_posts\nrender_rss\nrender_site\nrender_sources\nrender_tags\nsitemap\n</pre>\n<p>You can make Nikola redo everything by calling <tt class=\"docutils literal\">nikola forget</tt> and then <tt class=\"docutils literal\">nikola build</tt> (or <tt class=\"docutils literal\">nikola build <span class=\"pre\">-a</span></tt>,\nyou can make it do just a specific part of the site using task names, for example <tt class=\"docutils literal\">nikola build render_pages</tt>,\nand even individual files like <tt class=\"docutils literal\">nikola build output/index.html</tt></p>\n<p>Nikola also has other commands besides <tt class=\"docutils literal\">build</tt>:</p>\n<pre class=\"literal-block\">\n$ nikola help\nNikola is a tool to create static websites and blogs. For full documentation and more information, please visit http://getnikola.com/\n\n\nAvailable commands:\n  nikola auto                 automatically detect site changes, rebuild and optionally refresh a browser\n  nikola bootswatch_theme     given a swatch name from bootswatch.com and a parent theme, creates a custom theme\n  nikola build                run tasks\n  nikola check                check links and files in the generated site\n  nikola clean                clean action / remove targets\n  nikola console              start an interactive Python console with access to your site\n  nikola deploy               deploy the site\n  nikola doit_auto            automatically execute tasks when a dependency changes\n  nikola dumpdb               dump dependency DB\n  nikola forget               clear successful run status from internal DB\n  nikola github_deploy        deploy the site to GitHub pages\n  nikola help                 show help\n  nikola ignore               ignore task (skip) on subsequent runs\n  nikola import_wordpress     import a WordPress dump\n  nikola init                 create a Nikola site in the specified folder\n  nikola install_theme        install theme into current site\n  nikola list                 list tasks from dodo file\n  nikola new_page             create a new page in the site\n  nikola new_post             create a new blog post or site page\n  nikola orphans              list all orphans\n  nikola plugin               manage plugins\n  nikola serve                start the test webserver\n  nikola strace               use strace to list file_deps and targets\n  nikola tabcompletion        generate script for tab-completion\n  nikola version              print the Nikola version number\n\n  nikola help                 show help / reference\n  nikola help &lt;command&gt;       show command usage\n  nikola help &lt;task-name&gt;     show task usage\n</pre>\n<p>The <tt class=\"docutils literal\">serve</tt> command starts a web server so you can see the site you are creating:</p>\n<pre class=\"literal-block\">\n$ nikola serve -b\nServing HTTP on 127.0.0.1 port 8000 ...\n</pre>\n<p>After you do this, a web browser opens at <a class=\"reference external\" href=\"http://127.0.0.1:8000/\">http://127.0.0.1:8000/</a> and you should see\nthe sample site. This is useful as a \"preview\" of your work.</p>\n<p>By default, the <tt class=\"docutils literal\">serve</tt> command runs the web server on port 8000 on the IP address 127.0.0.1.\nYou can pass in an IP address and port number explicitly using <tt class=\"docutils literal\"><span class=\"pre\">-a</span> IP_ADDRESS</tt>\n(short version of <tt class=\"docutils literal\"><span class=\"pre\">--address</span></tt>) or <tt class=\"docutils literal\"><span class=\"pre\">-p</span> PORT_NUMBER</tt> (short version of <tt class=\"docutils literal\"><span class=\"pre\">--port</span></tt>)\nExample usage:</p>\n<pre class=\"literal-block\">\n$ nikola serve --address 0.0.0.0 --port 8080\nServing HTTP on 0.0.0.0 port 8080 ...\n</pre>\n</div>\n<div class=\"section\" id=\"creating-a-blog-post\">\n<h2><a class=\"toc-backref\" href=\"/stories/handbook.html#id19\">Creating a Blog Post</a></h2>\n<p>To create a new post, the easiest way is to run <tt class=\"docutils literal\">nikola new_post</tt>. You  will\nbe asked for a title for your post, and it will tell you where the post's file\nis located.</p>\n<p>By default, that file will contain also some extra information about your post (\"the metadata\").\nIt can be placed in a separate file by using the <tt class=\"docutils literal\"><span class=\"pre\">-2</span></tt> option, but it's generally\neasier to keep it in a single location.</p>\n<p>The contents of your post have to be written (by default) in <a class=\"reference external\" href=\"http://docutils.sf.net\">reStructuredText</a>\nbut you can use a lot of different markups using the <tt class=\"docutils literal\"><span class=\"pre\">-f</span></tt> option.</p>\n<p>Currently Nikola supports reStructuredText, Markdown, IPython Notebooks, HTML as input,\ncan also use Pandoc for conversion, and has support for BBCode, CreoleWiki, txt2tags, Textile\nand more via <a class=\"reference external\" href=\"http://plugins.getnikola.com\">plugins</a>.</p>\n<p>You can control what markup compiler is used for each file extension with the <tt class=\"docutils literal\">COMPILERS</tt>\noption. The default configuration expects them to be placed in <tt class=\"docutils literal\">posts</tt> but that can be\nchanged (see below, the <tt class=\"docutils literal\">POSTS</tt> and <tt class=\"docutils literal\">PAGES</tt> options)</p>\n<p>This is how it works:</p>\n<pre class=\"literal-block\">\n$ nikola new_post\nCreating New Post\n-----------------\n\nEnter title: How to make money\nYour post's text is at:  posts/how-to-make-money.txt\n</pre>\n<p>The content of that file is as follows:</p>\n<pre class=\"literal-block\">\n.. title: How to make money\n.. slug: how-to-make-money\n.. date: 2012-09-15 19:52:05 UTC\n.. tags:\n.. link:\n.. description:\n.. type: text\n\nWrite your post here.\n</pre>\n<p>The <tt class=\"docutils literal\">slug</tt> is the page name. Since often titles will have\ncharacters that look bad on URLs, it's generated as a \"clean\" version of the title.\nThe third line is the post's date, and is set to \"now\".</p>\n<p>The other lines are optional. Tags are comma-separated. The <tt class=\"docutils literal\">link</tt> is an original\nsource for the content, and <tt class=\"docutils literal\">description</tt> is mostly useful for SEO.\n<tt class=\"docutils literal\">type</tt> is the post type, whatever you set here (prepended with <tt class=\"docutils literal\">post-</tt>)\nwill become a CSS class of the <tt class=\"docutils literal\">&lt;article&gt;</tt> element for this post.  Defaults to\n<tt class=\"docutils literal\">text</tt> (resulting in a <tt class=\"docutils literal\"><span class=\"pre\">post-text</span></tt> class)</p>\n<p>You can add your own metadata fields in the same manner, if you use a theme that\nsupports them (for example: <tt class=\"docutils literal\">.. author: John Doe</tt>)</p>\n<p>To add these metadata fields to all new posts by default, you can set the\nvariable <tt class=\"docutils literal\">ADDITIONAL_METADATA</tt> in your configuration.  For example, you can\nadd the author metadata to all new posts by default, by adding the following\nto your configuration:</p>\n<pre class=\"literal-block\">\nADDITIONAL_METADATA = {\n    'author': 'John Doe'\n}\n</pre>\n<div class=\"sidebar\">\n<p class=\"first sidebar-title\">Other Metadata Fields</p>\n<p>Nikola will also use other metadata fields:</p>\n<dl class=\"last docutils\">\n<dt>author</dt>\n<dd>Author of the post, will be used in the RSS feed and possibly in the post\ndisplay (theme-dependent)</dd>\n<dt>annotations / noannotations</dt>\n<dd>Override the value of the <tt class=\"docutils literal\">ANNOTATIONS</tt> option for this specific post or page.</dd>\n<dt>category</dt>\n<dd>Like tags, except each post can have only one, and they usually have\nmore descriptive names.</dd>\n<dt>hidetitle</dt>\n<dd>Set \"True\" if you do not want to see the <strong>story</strong> title as a\nheading of the page (does not work for posts).</dd>\n<dt>nocomments</dt>\n<dd><p class=\"first\">Set to \"True\" to disable comments. Example:</p>\n<pre class=\"last literal-block\">\n.. nocomments: True\n</pre>\n</dd>\n<dt>password</dt>\n<dd>The post will be encrypted and invisible until the reader enters the password.\nAlso, the post's sourcecode will not be available.</dd>\n<dt>previewimage</dt>\n<dd><p class=\"first\">Designate a preview or other representative image path relative to BASE_URL\nfor use with Open Graph for posts. Adds the image when sharing on social\nmedia and many other uses.</p>\n<blockquote>\n<!-- previewimage: images/looks_great_on_facebook.png -->\n</blockquote>\n<p class=\"last\">The image can be of any size and dimension (services will crop and adapt)\nbut should less than 1 MB and be larger than 300x300 (ideally 600x600).</p>\n</dd>\n<dt>template</dt>\n<dd><p class=\"first\">Will change the template used to render this page/post specific page. Example:</p>\n<pre class=\"literal-block\">\n.. template: story.tmpl\n</pre>\n<p class=\"last\">That template needs to either be part of the theme, or be placed in a <tt class=\"docutils literal\">templates/</tt>\nfolder inside your site.</p>\n</dd>\n</dl>\n</div>\n<div class=\"note\">\n<p class=\"first admonition-title\">Note</p>\n<p>The Two-File Format</p>\n<p>Nikola originally used a separate <tt class=\"docutils literal\">.meta</tt> file. That will still work!\nThe format of the meta files is the same as shown above (i.e. only\nthe 7 base fields, in the order listed above), but without the\nexplanations:</p>\n<pre class=\"literal-block\">\nHow to make money\nhow-to-make-money\n2012-09-15 19:52:05 UTC\n</pre>\n<p>However, starting with Nikola v7, you can now use <tt class=\"docutils literal\">.meta</tt> files and put\nall metadata you want, complete with the explanations — they look just like\nthe beginning of our reST files.</p>\n<blockquote>\n<!-- title: How to make money -->\n<!-- slug: how-to-make-money -->\n<!-- date: 2012-09-15 19:52:05 UTC -->\n</blockquote>\n<p class=\"last\">Both file formats are supported; however, the new format is preferred, if\npossible.</p>\n</div>\n<p>If you are writing a multilingual site, you can also create a per-language\npost file (for example: <tt class=\"docutils literal\"><span class=\"pre\">how-to-make-money.es.txt</span></tt> with the default TRANSLATIONS_PATTERN, see below).\nThis one can replace metadata of the default language, for example:</p>\n<ul class=\"simple\">\n<li>The translated title for the post or page</li>\n<li>A translated version of the page name</li>\n</ul>\n<p>The pattern used for finding translations is controlled by the\nTRANSLATIONS_PATTERN variable in your configuration file.</p>\n<p>The default is to put the language code before the file extension,\nso the German translation of <tt class=\"docutils literal\">some_file.rst</tt> should be named\n<tt class=\"docutils literal\">some_file.de.rst</tt>. This is because the TRANSLATIONS_PATTERN variable is by\ndefault set to:</p>\n<pre class=\"literal-block\">\nTRANSLATIONS_PATTERN = \"{path}.{lang}.{ext}\"\n</pre>\n<div class=\"note\">\n<p class=\"first admonition-title\">Note</p>\n<p>Considered languages</p>\n<p class=\"last\">Nikola will only look for translation of input files for languages\nspecified in the TRANSLATIONS variable.</p>\n</div>\n<p>You can edit these files with your favourite text editor, and once you are happy\nwith the contents, generate the pages as explained in <a class=\"reference internal\" href=\"/stories/handbook.html#getting-started\">Getting Started</a></p>\n<p>Currently supported languages are:</p>\n<ul class=\"simple\">\n<li>Basque</li>\n<li>Bulgarian</li>\n<li>Catalan</li>\n<li>Chinese (Simplified)</li>\n<li>Croatian</li>\n<li>Czech</li>\n<li>Dutch</li>\n<li>English</li>\n<li>Esperanto</li>\n<li>Estonian</li>\n<li>Finnish</li>\n<li>French</li>\n<li>German</li>\n<li>Greek</li>\n<li>Hindi</li>\n<li>Italian</li>\n<li>Japanese</li>\n<li>Norwegian Bokmål</li>\n<li>Persian</li>\n<li>Polish</li>\n<li>Portuguese (Brasil)</li>\n<li>Russian</li>\n<li>Slovak</li>\n<li>Slovene</li>\n<li>Spanish</li>\n<li>Turkish</li>\n<li>Urdu</li>\n</ul>\n<p>If you wish to add support for more languages, check out the instructions\nat the <a class=\"reference external\" href=\"http://getnikola.com/theming.html\">theming guide</a>.</p>\n<p>The post page is generated using the <tt class=\"docutils literal\">post.tmpl</tt> template, which you can use\nto customize the output.</p>\n<p>The place where the post will be placed by <tt class=\"docutils literal\">new_post</tt> is based on the <tt class=\"docutils literal\">POSTS</tt>\nand <tt class=\"docutils literal\">PAGES</tt> configuration options:</p>\n<pre class=\"literal-block\">\n# POSTS and PAGES contains (wildcard, destination, template) tuples.\n#\n# The wildcard is used to generate a list of reSt source files\n# (whatever/thing.txt).\n#\n# That fragment could have an associated metadata file (whatever/thing.meta),\n# and optionally translated files (example for Spanish, with code \"es\"):\n#     whatever/thing.es.txt and whatever/thing.es.meta\n#\n#     This assumes you use the default TRANSLATIONS_PATTERN.\n#\n# From those files, a set of HTML fragment files will be generated:\n# cache/whatever/thing.html (and maybe cache/whatever/thing.html.es)\n#\n# These files are combined with the template to produce rendered\n# pages, which will be placed at\n# output / TRANSLATIONS[lang] / destination / pagename.html\n#\n# where \"pagename\" is the \"slug\" specified in the metadata file.\n#\n# The difference between POSTS and PAGES is that POSTS are added\n# to feeds and are considered part of a blog, while PAGES are\n# just independent HTML pages.\n#\n\nPOSTS = (\n    (\"posts/*.txt\", \"posts\", \"post.tmpl\"),\n    (\"posts/*.rst\", \"posts\", \"post.tmpl\"),\n)\nPAGES = (\n    (\"stories/*.txt\", \"stories\", \"story.tmpl\"),\n    (\"stories/*.rst\", \"stories\", \"story.tmpl\"),\n)\n</pre>\n<p><tt class=\"docutils literal\">new_post</tt> will use the <em>first</em> path in <tt class=\"docutils literal\">POSTS</tt> (or <tt class=\"docutils literal\">PAGES</tt> if <tt class=\"docutils literal\"><span class=\"pre\">-p</span></tt> is\nsupplied) that ends with the extension of your desired markup format (as\ndefined in <tt class=\"docutils literal\">COMPILERS</tt> in conf.py) as the directory that the new post will be\nwritten into.  If no such entry can be found, the post won’t be created.</p>\n<p>The <tt class=\"docutils literal\">new_post</tt> command supports some options:</p>\n<pre class=\"literal-block\">\n$ nikola help new_post\nPurpose: Create a new blog post or site page.\nUsage:   nikola new_post [options] [path]\n\nOptions:\n  -p, --page                Create a page instead of a blog post.\n  -t ARG, --title=ARG       Title for the page/post.\n  --tags=ARG                Comma-separated tags for the page/post.\n  -1                        Create post with embedded metadata (single file format)\n  -2                        Create post with separate metadata (two file format)\n  -f ARG, --format=ARG      Markup format for post, one of rest, markdown, wiki, bbcode, html, textile, txt2tags\n</pre>\n<p>The optional <tt class=\"docutils literal\">path</tt> parameter tells nikola exactly where to put it instead of guessing from your config.\nSo, if you do <tt class=\"docutils literal\">nikola new_post posts/random/foo.txt</tt> you will have a post in that path, with\n\"foo\" as its slug.</p>\n<div class=\"section\" id=\"teasers\">\n<h3><a class=\"toc-backref\" href=\"/stories/handbook.html#id20\">Teasers</a></h3>\n<p>You may not want to show the complete content of your posts either on your\nindex page or in RSS feeds, but to display instead only the beginning of them.</p>\n<p>If it's the case, you only need to add a \"magical comment\" in your post.</p>\n<p>In reStructuredText:</p>\n<pre class=\"literal-block\">\n.. TEASER_END\n</pre>\n<p>In Markdown:</p>\n<pre class=\"literal-block\">\n&lt;!-- TEASER_END --&gt;\n</pre>\n<p>By default all your RSS feeds will be shortened (they'll contain only teasers)\nwhereas your index page will still show complete posts. You can change\nthis behaviour with your <tt class=\"docutils literal\">conf.py</tt>: <tt class=\"docutils literal\">INDEX_TEASERS</tt> defines whether index\npage should display the whole contents or only teasers. <tt class=\"docutils literal\">RSS_TEASERS</tt>\nworks the same way for your RSS feeds.</p>\n<p>By default, teasers will include a \"read more\" link at the end. If you want to\nchange that text, you can use a custom teaser:</p>\n<pre class=\"literal-block\">\n.. TEASER_END: click to read the rest of the article\n</pre>\n<p>Or you can completely customize the link using the <tt class=\"docutils literal\">READ_MORE_LINK</tt> option:</p>\n<pre class=\"literal-block\">\n# A HTML fragment with the Read more... link.\n# The following tags exist and are replaced for you:\n# {link}        A link to the full post page.\n# {read_more}   The string “Read more” in the current language.\n# {{            A literal { (U+007B LEFT CURLY BRACKET)\n# }}            A literal } (U+007D RIGHT CURLY BRACKET)\n# READ_MORE_LINK = '&lt;p class=\"more\"&gt;&lt;a href=\"{link}\"&gt;{read_more}…&lt;/a&gt;&lt;/p&gt;'\n</pre>\n</div>\n<div class=\"section\" id=\"drafts\">\n<h3><a class=\"toc-backref\" href=\"/stories/handbook.html#id21\">Drafts</a></h3>\n<p>If you add a \"draft\" tag to a post, then it will not be shown in indexes and feeds.\nIt <em>will</em> be compiled, and if you deploy it it <em>will</em> be made available, so use\nwith care. If you wish your drafts to be not available in your deployed site, you\ncan set <tt class=\"docutils literal\">DEPLOY_DRAFTS = False</tt> in your configuration.</p>\n<p>Also if a post has a date in the future, it will not be shown in indexes until\nyou rebuild after that date. This behaviour can be disabled by setting\n<tt class=\"docutils literal\">FUTURE_IS_NOW = True</tt> in your configuration, which will make future posts be\npublished immediately.  Posts dated in the future are <em>not</em> deployed by default\n(when <tt class=\"docutils literal\">FUTURE_IS_NOW = False</tt>).  To make future posts available in the\ndeployed site, you can set <tt class=\"docutils literal\">DEPLOY_FUTURE = True</tt> in your configuration.\nGenerally, you want FUTURE_IS_NOW and DEPLOY_FUTURE to be the same value.</p>\n</div>\n<div class=\"section\" id=\"private-formerly-retired-posts\">\n<h3><a class=\"toc-backref\" href=\"/stories/handbook.html#id22\">Private (formerly retired) Posts</a></h3>\n<p>If you add a \"private\" tag to a post, then it will not be shown in indexes and feeds.\nIt <em>will</em> be compiled, and if you deploy it it <em>will</em> be made available, so it will\nnot generate 404s for people who had linked to it.</p>\n</div>\n<div class=\"section\" id=\"queuing-posts\">\n<h3><a class=\"toc-backref\" href=\"/stories/handbook.html#id23\">Queuing Posts</a></h3>\n<p>Some blogs tend to have new posts based on a schedule (for example,\nevery Mon, Wed, Fri) but the blog authors don't like to manually\nschedule their posts.  You can schedule your blog posts based on a\nrule, by specifying a rule in the <tt class=\"docutils literal\">SCHEDULE_RULE</tt> in your\nconfiguration.  You can either post specific blog posts according to\nthis schedule by using the <tt class=\"docutils literal\"><span class=\"pre\">--schedule</span></tt> flag on the <tt class=\"docutils literal\">new_post</tt>\ncommand or post all new posts according to this schedule by setting\n<tt class=\"docutils literal\">SCHEDULE_ALL = True</tt> in your configuration. (Note: This feature\nrequires that the <tt class=\"docutils literal\">FUTURE_IS_NOW</tt> setting is set to <tt class=\"docutils literal\">False</tt>)</p>\n<p>For example, if you would like to schedule your posts to be on every\nMonday, Wednesday and Friday at 7am, add the following\n<tt class=\"docutils literal\">SCHEDULE_RULE</tt> to your configuration</p>\n<pre class=\"literal-block\">\nSCHEDULE_RULE = 'RRULE:FREQ=WEEKLY;BYDAY=MO,WE,FR;BYHOUR=7;BYMINUTE=0;BYSECOND=0'\n</pre>\n<p>For more details on how to specify a recurrence rule, look at the\n<a class=\"reference external\" href=\"http://www.kanzaki.com/docs/ical/rrule.html\">iCal specification</a>.</p>\n<p>Say, you get a free Sunday, and want to write a flurry of new posts,\nor at least posts for the rest of the week, you would run the\n<tt class=\"docutils literal\">new_post</tt> command with the <tt class=\"docutils literal\"><span class=\"pre\">--schedule</span></tt> flag, as many times as\nyou want:</p>\n<pre class=\"literal-block\">\n$ nikola new_post --schedule\n# Creates a new post to be posted on Monday, 7am.\n$ nikola new_post -s\n# Creates a new post to be posted on Wednesday, 7am.\n$ nikola new_post -s\n# Creates a new post to be posted on Friday, 7am.\n.\n.\n.\n</pre>\n<p>All these posts get queued up according to your schedule, but note\nthat you will anyway need to build and deploy your site for the posts\nto appear online.  You can have a cron job that does this regularly.</p>\n</div>\n<div class=\"section\" id=\"post-types\">\n<h3><a class=\"toc-backref\" href=\"/stories/handbook.html#id24\">Post Types</a></h3>\n<p>Nikola supports specifying post types, just like Tumblr does.  Post\ntypes affect the look of your posts, by adding a <tt class=\"docutils literal\"><span class=\"pre\">post-YOURINPUTHERE</span></tt>\nCSS class to the post.  Each post can have one and exactly one type.  Nikola\nstyles the following types in the default themes:</p>\n<table border=\"1\" class=\"docutils\">\n<colgroup>\n<col width=\"27%\">\n<col width=\"44%\">\n<col width=\"29%\">\n</colgroup>\n<thead valign=\"bottom\">\n<tr><th class=\"head\">Name(s)</th>\n<th class=\"head\">Description</th>\n<th class=\"head\">Styling</th>\n</tr>\n</thead>\n<tbody valign=\"top\">\n<tr><td>text</td>\n<td>plain text — default value</td>\n<td>standard</td>\n</tr>\n<tr><td>micro</td>\n<td>“small” (short) posts</td>\n<td>big serif font</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>\n<div class=\"section\" id=\"creating-a-page\">\n<h2><a class=\"toc-backref\" href=\"/stories/handbook.html#id25\">Creating a Page</a></h2>\n<p>Pages are the same as posts, except that:</p>\n<ul class=\"simple\">\n<li>They are not added to the front page</li>\n<li>They don't appear on the RSS feed</li>\n<li>They use the <tt class=\"docutils literal\">story.tmpl</tt> template instead of <tt class=\"docutils literal\">post.tmpl</tt> by default</li>\n</ul>\n<p>The default configuration expects the page's metadata and text files to be on the\n<tt class=\"docutils literal\">stories</tt> folder, but that can be changed (see <tt class=\"docutils literal\">PAGES</tt> option above).</p>\n<p>You can create the page's files manually or use the <tt class=\"docutils literal\">new_post</tt> command\nwith the <tt class=\"docutils literal\"><span class=\"pre\">-p</span></tt> option, which will place the files in the folder that\nhas <tt class=\"docutils literal\">use_in_feed</tt> set to False.</p>\n</div>\n<div class=\"section\" id=\"redirections\">\n<h2><a class=\"toc-backref\" href=\"/stories/handbook.html#id26\">Redirections</a></h2>\n<p>If you need a page to be available in more than one place, you can define redirections\nin your <tt class=\"docutils literal\">conf.py</tt>:</p>\n<pre class=\"literal-block\">\n# A list of redirection tuples, [(\"foo/from.html\", \"/bar/to.html\")].\n#\n# A HTML file will be created in output/foo/from.html that redirects\n# to the \"/bar/to.html\" URL. notice that the \"from\" side MUST be a\n# relative URL.\n#\n# If you don't need any of these, just set to []\n\nREDIRECTIONS = [(\"index.html\", \"/weblog/index.html\")]\n</pre>\n<p>It's better if you can do these using your web server's configuration, but if\nyou can't, this will work.</p>\n</div>\n<div class=\"section\" id=\"configuration\">\n<h2><a class=\"toc-backref\" href=\"/stories/handbook.html#id27\">Configuration</a></h2>\n<p>The configuration file is called <tt class=\"docutils literal\">conf.py</tt> and can be used to customize a lot of\nwhat Nikola does. Its syntax is python, but if you don't know the language, it\nstill should not be terribly hard to grasp.</p>\n<p>The default <tt class=\"docutils literal\">conf.py</tt> you get with Nikola should be fairly complete, and is quite\ncommented.</p>\n<p>You surely want to edit these options:</p>\n<pre class=\"literal-block\">\n# Data about this site\nBLOG_AUTHOR = \"Your Name\"  # (translatable)\nBLOG_TITLE = \"Demo Site\"  # (translatable)\nSITE_URL = \"http://getnikola.com/\"\nBLOG_EMAIL = \"joe@demo.site\"\nBLOG_DESCRIPTION = \"This is a demo site for Nikola.\"  # (translatable)\n</pre>\n<p>Some options are demarked with a (translatable) comment above or right next to\nthem.  For those options, two types of values can be provided:</p>\n<blockquote>\n<ul class=\"simple\">\n<li>a string, which will be used for all languages</li>\n<li>a dict of language-value pairs, to have different values in each language</li>\n</ul>\n</blockquote>\n</div>\n<div class=\"section\" id=\"customizing-your-site\">\n<h2><a class=\"toc-backref\" href=\"/stories/handbook.html#id28\">Customizing Your Site</a></h2>\n<p>There are lots of things you can do to personalize your website, but let's see\nthe easy ones!</p>\n<dl class=\"docutils\">\n<dt>CSS tweaking</dt>\n<dd><p class=\"first\">Using the default configuration, you can create a <tt class=\"docutils literal\">assets/css/custom.css</tt>\nfile and then it will be loaded from the <tt class=\"docutils literal\">&lt;head&gt;</tt> blocks of your site\npages.  Create it and put your CSS code there, for minimal disruption of the\nprovided CSS files.</p>\n<p>If you feel tempted to touch other files in assets, you probably will be better off\nwith a <a class=\"reference external\" href=\"/stories/theming.html\">custom theme</a>.</p>\n<p class=\"last\">If you want to use <a class=\"reference external\" href=\"http://lesscss.org/\">LESS</a> or <a class=\"reference external\" href=\"http://sass-lang.com/\">Sass</a> for your custom CSS, or the theme you use\ncontains LESS or Sass code that you want to override, you will need to install\nthe <a class=\"reference external\" href=\"http://plugins.getnikola.com/#less\">LESS plugin</a> or\n<a class=\"reference external\" href=\"http://plugins.getnikola.com/#sass\">SASS plugin</a> create a <tt class=\"docutils literal\">less</tt> or\n<tt class=\"docutils literal\">sass</tt> directory in your site root, put your <tt class=\"docutils literal\">.less</tt> or <tt class=\"docutils literal\">.scss</tt> files\nthere and a targets file containing the list of files you want compiled.</p>\n</dd>\n</dl>\n<dl class=\"docutils\">\n<dt>Template tweaking</dt>\n<dd>If you really want to change the pages radically, you will want to do a\n<a class=\"reference external\" href=\"/stories/theming.html\">custom theme</a>.</dd>\n<dt>Navigation Links</dt>\n<dd><p class=\"first\">The <tt class=\"docutils literal\">NAVIGATION_LINKS</tt> option lets you define what links go in a sidebar or menu\n(depending on your theme) so you can link to important pages, or to other sites.</p>\n<p>The format is a language-indexed dictionary, where each element is a tuple of\ntuples which are one of:</p>\n<ol class=\"arabic simple\">\n<li>A (url, text) tuple, describing a link</li>\n<li>A (((url, text), (url, text), (url, text)), title) tuple, describing a submenu / sublist.</li>\n</ol>\n<p>Example:</p>\n<pre class=\"literal-block\">\nNAVIGATION_LINKS = {\n    DEFAULT_LANG: (\n        ('/archive.html', 'Archives'),\n        ('/categories/index.html', 'Tags'),\n        ('/rss.xml', 'RSS'),\n        ((('/foo', 'FOO'),\n          ('/bar', 'BAR')), 'BAZ'),\n    ),\n}\n</pre>\n<div class=\"note\">\n<p class=\"first admonition-title\">Note</p>\n<p class=\"last\">Support for submenus is theme-dependent.  Only one level of\nsubmenus is supported.</p>\n</div>\n<div class=\"note\">\n<p class=\"first admonition-title\">Note</p>\n<p class=\"last\">Some themes, including the default Bootstrap 3 theme, may\npresent issues if the menu is too large.  (in <tt class=\"docutils literal\">bootstrap3</tt>, the\nnavbar can grow too large and cover contents.)</p>\n</div>\n<p class=\"last\">The <tt class=\"docutils literal\">SEARCH_FORM</tt> option contains the HTML code for a search form based on\nduckduckgo.com which should always work, but feel free to change it to\nsomething else.</p>\n</dd>\n<dt>Footer</dt>\n<dd><tt class=\"docutils literal\">CONTENT_FOOTER</tt> is displayed, small at the bottom of all pages, I use it for\nthe copyright notice. The default shows a text formed using <tt class=\"docutils literal\">BLOG_AUTHOR</tt>,\n<tt class=\"docutils literal\">BLOG_EMAIL</tt>, the date and <tt class=\"docutils literal\">LICENSE</tt>.  Note you need to use\n<tt class=\"docutils literal\">CONTENT_FOOTER_FORMATS</tt> instead of regular str.format or %-formatting,\nfor compatibility with the translatable settings feature.</dd>\n<dt>BODY_END</dt>\n<dd>This option lets you define a HTML snippet that will be added at the bottom of body.\nThe main usage is a Google analytics snippet or something similar, but you can really\nput anything there. Good place for JavaScript.</dd>\n<dt>SOCIAL_BUTTONS_CODE</dt>\n<dd>The <tt class=\"docutils literal\">SOCIAL_BUTTONS_CODE</tt> option lets you define a HTML snippet that will be added\nat the bottom of body. It defaults to a snippet for AddThis, but you can\nreally put anything there. See <cite>social_buttons.html</cite> for more details.</dd>\n</dl>\n</div>\n<div class=\"section\" id=\"adding-files\">\n<h2><a class=\"toc-backref\" href=\"/stories/handbook.html#id29\">Adding Files</a></h2>\n<p>Any files you want to be in <tt class=\"docutils literal\">output/</tt> but are not generated by Nikola (for example,\n<tt class=\"docutils literal\">favicon.ico</tt>) just put it in <tt class=\"docutils literal\">files/</tt>. Everything there is copied into\n<tt class=\"docutils literal\">output</tt> by the <tt class=\"docutils literal\">copy_files</tt> task. Remember that you can't have files that collide\nwith files Nikola generates (it will give an error).</p>\n<div class=\"admonition-important admonition\">\n<p class=\"first admonition-title\">Important</p>\n<p class=\"last\">Don't put any files manually in <tt class=\"docutils literal\">output/</tt>. Ever. Really. Maybe someday Nikola\nwill just wipe <tt class=\"docutils literal\">output/</tt> and then you will be sorry. So, please don't do that.</p>\n</div>\n<p>If you want to copy more than one folder of static files into <tt class=\"docutils literal\">output</tt> you can\nchange the FILES_FOLDERS option:</p>\n<pre class=\"literal-block\">\n# One or more folders containing files to be copied as-is into the output.\n# The format is a dictionary of \"source\" \"relative destination\".\n# Default is:\n# FILES_FOLDERS = {'files': '' }\n# Which means copy 'files' into 'output'\n</pre>\n</div>\n<div class=\"section\" id=\"getting-more-themes\">\n<h2><a class=\"toc-backref\" href=\"/stories/handbook.html#id30\">Getting More Themes</a></h2>\n<p>There are a few themes for Nikola. They are available at\nthe <a class=\"reference external\" href=\"http://themes.getnikola.com/\">Themes Index</a>.\nNikola has a built-in theme download/install mechanism to install those themes — the <tt class=\"docutils literal\">install_theme</tt> command:</p>\n<pre class=\"literal-block\">\n$ nikola install_theme -l\nThemes:\n-------\nblogtxt\nbootstrap3-gradients\n⋮\n⋮\n\n$ nikola install_theme blogtxt\n[2013-10-12T16:46:13Z] NOTICE: install_theme: Downloading:\nhttp://themes.getnikola.com/v6/blogtxt.zip\n[2013-10-12T16:46:15Z] NOTICE: install_theme: Extracting: blogtxt into themes\n</pre>\n<p>And there you are, you now have themes/blogtxt installed. It's very\nrudimentary, but it should work in most cases.</p>\n<p>If you create a nice theme, please share it!  You can do it as a pull\nrequest in the  <a class=\"reference external\" href=\"https://github.com/getnikola/nikola-themes\">GitHub repository</a>.</p>\n<p>One other option is to tweak an existing theme using a different color scheme,\ntypography and CSS in general. Nikola provides a <tt class=\"docutils literal\">bootswatch_theme</tt> option\nto create a custom theme by downloading free CSS files from <a class=\"reference external\" href=\"http://bootswatch.com\">http://bootswatch.com</a>:</p>\n<pre class=\"literal-block\">\n$ nikola bootswatch_theme -n custom_theme -s spruce -p bootstrap3\n[2013-10-12T16:46:58Z] NOTICE: bootswatch_theme: Creating 'custom_theme' theme\nfrom 'spruce' and 'bootstrap3'\n[2013-10-12T16:46:58Z] NOTICE: bootswatch_theme: Downloading:\nhttp://bootswatch.com//spruce/bootstrap.min.css\n[2013-10-12T16:46:58Z] NOTICE: bootswatch_theme: Downloading:\nhttp://bootswatch.com//spruce/bootstrap.css\n[2013-10-12T16:46:59Z] NOTICE: bootswatch_theme: Theme created. Change the THEME setting to \"custom_theme\" to use it.\n</pre>\n<p>You can even try what different swatches do on an existing site using\ntheir handy <a class=\"reference external\" href=\"http://news.bootswatch.com/post/29555952123/a-bookmarklet-for-bootswatch\">bootswatchlet</a></p>\n<p>Play with it, there's cool stuff there. This feature was suggested by\n<a class=\"reference external\" href=\"http://elgalpondebanquito.com.ar\">clodo</a>.</p>\n</div>\n<div class=\"section\" id=\"deployment\">\n<h2><a class=\"toc-backref\" href=\"/stories/handbook.html#id31\">Deployment</a></h2>\n<p>Nikola doesn't really have a concept of deployment. However, if you can specify your\ndeployment procedure as a series of commands, you can put them in the <tt class=\"docutils literal\">DEPLOY_COMMANDS</tt>\noption, and run them with <tt class=\"docutils literal\">nikola deploy</tt>.</p>\n<p>One caveat is that if any command has a % in it, you should double them.</p>\n<p>Here is an example, from my own site's deployment script:</p>\n<pre class=\"literal-block\">\nDEPLOY_COMMANDS = [\n    'rsync -rav --delete output/ ralsina@lateral.netmanagers.com.ar:/srv/www/lateral',\n    'rdiff-backup output ~/blog-backup',\n    \"links -dump 'http://www.twingly.com/ping2?url=lateral.netmanagers.com.ar'\",\n]\n</pre>\n<p>Other interesting ideas are using\n<a class=\"reference external\" href=\"http://toroid.org/ams/git-website-howto\">git as a deployment mechanism</a> (or any other VCS\nfor that matter), using <a class=\"reference external\" href=\"http://lftp.yar.ru/\">lftp mirror</a> or unison, or Dropbox.\nAny way you can think of to copy files from one place to another is good enough.</p>\n<div class=\"section\" id=\"deploying-to-github\">\n<h3><a class=\"toc-backref\" href=\"/stories/handbook.html#id32\">Deploying to GitHub</a></h3>\n<p>Nikola provides a separate command <tt class=\"docutils literal\">github_deploy</tt> to deploy your\nsite to GitHub pages.  The command builds the site, commits the\noutput to a gh-pages branch and pushes the output to GitHub.</p>\n<p>The branch to use for committing the sources can be changed using the\n<tt class=\"docutils literal\">GITHUB_DEPLOY_BRANCH</tt> option in your config.  For a\nuser.github.io/organization.github.io, this MUST be set to <tt class=\"docutils literal\">master</tt>,\nand the branch containing the sources must be changed to something\nelse, like <tt class=\"docutils literal\">deploy</tt>, using the <tt class=\"docutils literal\">GITHUB_SOURCE_BRANCH</tt> option.  The\nremote name to which the changes are pushed is <tt class=\"docutils literal\">origin</tt> by default,\nand can be changed using the <tt class=\"docutils literal\">GITHUB_REMOTE_NAME</tt> option.  You also,\nobviously, need to have <tt class=\"docutils literal\">git</tt> on your PATH, and should be able to\npush to the repository specified as the remote.</p>\n<p>This command performs the following actions, when it is run:</p>\n<ol class=\"arabic simple\">\n<li>Ensure that your site is a git repository, and git is on the PATH.</li>\n<li>Check for changes, and prompt the user to continue, if required.</li>\n<li>Build the site</li>\n<li>Clean any files that are \"unknown\" to Nikola.</li>\n<li>Create a deploy branch, if one doesn't exist.</li>\n<li>Commit the output to this branch.  (NOTE: Any untracked source\nfiles, may get committed at this stage, on the wrong branch!)</li>\n<li>Push and deploy!</li>\n</ol>\n</div>\n</div>\n<div class=\"section\" id=\"comments-and-annotations\">\n<h2><a class=\"toc-backref\" href=\"/stories/handbook.html#id33\">Comments and Annotations</a></h2>\n<p>While Nikola creates static sites, there is a minimum level of user interaction you\nare probably expecting: comments.</p>\n<p>Nikola supports several third party comment systems:</p>\n<ul class=\"simple\">\n<li><a class=\"reference external\" href=\"http://disqus.com\">DISQUS</a></li>\n<li><a class=\"reference external\" href=\"http://www.intensedebate.com/\">IntenseDebate</a></li>\n<li><a class=\"reference external\" href=\"http://www.livefyre.com/\">LiveFyre</a></li>\n<li><a class=\"reference external\" href=\"http://moot.it\">Moot</a></li>\n<li><a class=\"reference external\" href=\"http://plus.google.com\">Google+</a></li>\n<li><a class=\"reference external\" href=\"http://facebook.com/\">Facebook</a></li>\n<li><a class=\"reference external\" href=\"http://posativ.org/isso/\">isso</a></li>\n</ul>\n<p>By default it will use DISQUS, but you can change by setting <tt class=\"docutils literal\">COMMENT_SYSTEM</tt>\nto one of \"disqus\", \"intensedebate\", \"livefyre\", \"moot\", \"googleplus\" or\n\"facebook\"</p>\n<div class=\"sidebar\">\n<p class=\"first sidebar-title\"><tt class=\"docutils literal\">COMMENT_SYSTEM_ID</tt></p>\n<p>The value of <tt class=\"docutils literal\">COMMENT_SYSTEM_ID</tt> depends on what comment system you\nare using and you can see it in the system's admin interface.</p>\n<ul class=\"last simple\">\n<li>For DISQUS it's called the <strong>shortname</strong></li>\n<li>In IntenseDebate it's the <strong>IntenseDebate site acct</strong></li>\n<li>In LiveFyre it's the <strong>siteId</strong></li>\n<li>In Moot it's your <strong>username</strong></li>\n<li>For Google Plus, <tt class=\"docutils literal\">COMMENT_SYSTEM_ID</tt> need not be set, but you must\n<a class=\"reference external\" href=\"https://plus.google.com/authorship\">verify your authorship</a></li>\n<li>For Facebook, you need to <cite>create an app\n&lt;https://developers.facebook.com/apps&gt;</cite> (turn off sandbox mode!)\nand get an <strong>App ID</strong></li>\n<li>For isso, it is the URL of isso (must be world-accessible and <strong>have a trailing slash</strong>,\ndefault <tt class=\"docutils literal\"><span class=\"pre\">http://localhost:8080/</span></tt>)</li>\n</ul>\n</div>\n<p>To use comments in a visible site, you should register with the service and\nthen set the <tt class=\"docutils literal\">COMMENT_SYSTEM_ID</tt> option.</p>\n<p>I recommend 3rd party comments, and specially DISQUS because:</p>\n<ol class=\"arabic simple\">\n<li>It doesn't require any server-side software on your site</li>\n<li>They offer you a way to export your comments, so you can take\nthem with you if you need to.</li>\n<li>It's free.</li>\n<li>It's damn nice.</li>\n</ol>\n<p>You can disable comments for a post by adding a \"nocomments\" metadata field to it:</p>\n<pre class=\"literal-block\">\n.. nocomments: True\n</pre>\n<div class=\"admonition-disqus-support admonition\">\n<p class=\"first admonition-title\">DISQUS Support</p>\n<p class=\"last\">In some cases, when you run the test site, you won't see the comments.\nThat can be fixed by adding the disqus_developer flag to the templates\nbut it's probably more trouble than it's worth.</p>\n</div>\n<div class=\"admonition-moot-support admonition\">\n<p class=\"first admonition-title\">Moot Support</p>\n<p>Moot doesn't support comment counts on index pages, and it requires adding\nthis to your <tt class=\"docutils literal\">conf.py</tt>:</p>\n<pre class=\"code python last literal-block\">\n<span class=\"n\">BODY_END</span> <span class=\"o\">=</span> <span class=\"s\">\"\"\"\n&lt;script src=\"//cdn.moot.it/1/moot.min.js\"&gt;&lt;/script&gt;\n\"\"\"</span>\n<span class=\"n\">EXTRA_HEAD_DATA</span> <span class=\"o\">=</span> <span class=\"s\">\"\"\"\n&lt;link rel=\"stylesheet\" type=\"text/css\" href=\"//cdn.moot.it/1/moot.css\"&gt;\n&lt;meta name=\"viewport\" content=\"width=device-width\"&gt;\n&lt;meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\"&gt;\n\"\"\"</span>\n</pre>\n</div>\n<div class=\"admonition-facebook-support admonition\">\n<p class=\"first admonition-title\">Facebook Support</p>\n<p class=\"last\">You need jQuery, but not because Facebook wants it (see Issue\n#639).</p>\n</div>\n<p>An alternative or complement to comments are annotations. Nikola integrates\nthe annotation service provided by <a class=\"reference external\" href=\"/stories/annotateit.org\">AnnotateIt.</a>\nTo use it, set the <tt class=\"docutils literal\">ANNOTATIONS</tt> option to True. This is specially useful\nif you want feedback on specific parts of your writing.</p>\n<p>You can enable or disable annotations for specific posts or pages using the\n<tt class=\"docutils literal\">annotations</tt> and <tt class=\"docutils literal\">noannotations</tt> metadata.</p>\n<p>Annotations require JQuery and are therefore not supported in the base theme.\nYou can check bootstrap theme's <tt class=\"docutils literal\">base.html</tt> for details on how to handle them in\ncustom themes.</p>\n</div>\n<div class=\"section\" id=\"image-galleries\">\n<h2><a class=\"toc-backref\" href=\"/stories/handbook.html#id34\">Image Galleries</a></h2>\n<p>To create an image gallery, all you have to do is add a folder inside <tt class=\"docutils literal\">galleries</tt>,\nand put images there. Nikola will take care of creating thumbnails, index page, etc.</p>\n<p>If you click on images on a gallery, you should see a bigger image, thanks to\nthe excellent <a class=\"reference external\" href=\"http://www.jacklmoore.com/colorbox\">colorbox</a></p>\n<p>The gallery pages are generated using the <tt class=\"docutils literal\">gallery.tmpl</tt> template, and you can\ncustomize it there (you could switch to another lightbox instead of colorbox, change\nits settings, change the layout, etc.).</p>\n<p>The <tt class=\"docutils literal\">conf.py</tt> options affecting gallery pages are these:</p>\n<pre class=\"literal-block\">\n# Galleries are folders in galleries/\n# Final location of galleries will be output / GALLERY_PATH / gallery_name\nGALLERY_PATH = \"galleries\"\nTHUMBNAIL_SIZE = 180\nMAX_IMAGE_SIZE = 1280\nUSE_FILENAME_AS_TITLE = True\nGALLERY_SORT_BY_DATE = False\nEXTRA_IMAGE_EXTENSIONS = []\n</pre>\n<p>If you add a file in <tt class=\"docutils literal\">galleries/gallery_name/index.txt</tt> its contents will be\nconverted to HTML and inserted above the images in the gallery page. The\nformat is the same as for posts.</p>\n<p>If you add some image filenames in <tt class=\"docutils literal\">galleries/gallery_name/exclude.meta</tt>, they\nwill be excluded in the gallery page.</p>\n<p>If <tt class=\"docutils literal\">USE_FILENAME_AS_TITLE</tt> is True the filename (parsed as a readable string)\nis used as the photo caption. If the filename starts with a number, it will\nbe stripped. For example <tt class=\"docutils literal\">03_an_amazing_sunrise.jpg</tt> will be render as <em>An amazing sunrise</em>.</p>\n<p>Here is a <a class=\"reference external\" href=\"/galleries/demo\">demo gallery</a> of historic, public domain Nikola\nTesla pictures taken from <a class=\"reference external\" href=\"http://kerryr.net/pioneers/gallery/tesla.htm\">this site</a>.</p>\n</div>\n<div class=\"section\" id=\"post-processing-filters\">\n<h2><a class=\"toc-backref\" href=\"/stories/handbook.html#id35\">Post Processing Filters</a></h2>\n<p>You can apply post processing to the files in your site, in order to optimize them\nor change them in arbitrary ways. For example, you may want to compress all CSS\nand JS files using yui-compressor.</p>\n<p>To do that, you can use the provided helper adding this in your <tt class=\"docutils literal\">conf.py</tt>:</p>\n<pre class=\"literal-block\">\nfrom nikola import filters\n\nFILTERS = {\n  \".css\": [filters.yui_compressor],\n  \".js\": [filters.yui_compressor],\n}\n</pre>\n<p>Where <tt class=\"docutils literal\">filters.yui_compressor</tt> is a helper function provided by Nikola. You can\nreplace that with strings describing command lines, or arbitrary python functions.</p>\n<p>If there's any specific thing you expect to be generally useful as a filter, contact\nme and I will add it to the filters library so that more people use it.</p>\n<p>The currently available filters are:</p>\n<div class=\"sidebar\">\n<p class=\"first sidebar-title\">Creating your own filters</p>\n<p>You can use any program name that works in place as a filter, like <tt class=\"docutils literal\">sed <span class=\"pre\">-i</span></tt>\nand you can use arbitrary python functions as filters, too.</p>\n<p>If your program doesn't run in-place, then you can use Nikola's runinplace function.\nFor example, this is how the yui_compressor filter is implemented:</p>\n<pre class=\"code python literal-block\">\n<span class=\"k\">def</span> <span class=\"nf\">yui_compressor</span><span class=\"p\">(</span><span class=\"n\">infile</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">runinplace</span><span class=\"p\">(</span><span class=\"s\">r'yui-compressor --nomunge %1 -o %2'</span><span class=\"p\">,</span> <span class=\"n\">infile</span><span class=\"p\">)</span>\n</pre>\n<p>You can turn any function into a filter using <tt class=\"docutils literal\">apply_to_file</tt>.\nAs a silly example, this would make everything uppercase and totally break\nyour website:</p>\n<pre class=\"code python last literal-block\">\n<span class=\"kn\">import</span> <span class=\"nn\">string</span>\n<span class=\"kn\">from</span> <span class=\"nn\">nikola.filters</span> <span class=\"kn\">import</span> <span class=\"n\">apply_to_file</span>\n<span class=\"n\">FILTERS</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n  <span class=\"s\">\".html\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"n\">apply_to_file</span><span class=\"p\">(</span><span class=\"n\">string</span><span class=\"o\">.</span><span class=\"n\">upper</span><span class=\"p\">)]</span>\n<span class=\"p\">}</span>\n</pre>\n</div>\n<dl class=\"docutils\">\n<dt>minify_lines</dt>\n<dd>Strips leading whitespace and blank lines. Useful for compacting HTML but pre-formatted text must be escaped manually.</dd>\n<dt>yui_compressor</dt>\n<dd>Compress CSS/JavaScript using <a class=\"reference external\" href=\"http://yui.github.io/yuicompressor/\">YUI compressor</a></dd>\n<dt>closure_compiler</dt>\n<dd>Compile, compress, and optimize JavaScript <a class=\"reference external\" href=\"https://developers.google.com/closure/compiler/\">Google Closure Compiler</a></dd>\n<dt>optipng</dt>\n<dd>Compress PNG files using <a class=\"reference external\" href=\"http://optipng.sourceforge.net/\">optipng</a></dd>\n<dt>jpegoptim</dt>\n<dd>Compress JPEG files using <a class=\"reference external\" href=\"http://www.kokkonen.net/tjko/projects.html\">jpegoptim</a></dd>\n<dt>typogrify</dt>\n<dd>Improve typography using <a class=\"reference external\" href=\"https://github.com/mintchaos/typogrify\">typogrify</a></dd>\n</dl>\n</div>\n<div class=\"section\" id=\"optimizing-your-website\">\n<h2><a class=\"toc-backref\" href=\"/stories/handbook.html#id36\">Optimizing Your Website</a></h2>\n<p>One of the main goals of Nikola is to make your site fast and light. So here are a few\ntips we have found when setting up Nikola with Apache. If you have more, or\ndifferent ones, or about other web servers, please share!</p>\n<ol class=\"arabic\">\n<li><p class=\"first\">Use a speed testing tool. I used Yahoo's YSlow but you can use any of them, and\nit's probably a good idea to use more than one.</p>\n</li>\n<li><p class=\"first\">Enable compression in Apache:</p>\n<pre class=\"literal-block\">\nAddOutputFilterByType DEFLATE text/html text/plain text/xml text/css text/javascript\n</pre>\n</li>\n<li><p class=\"first\">If even after you did the previous step the CSS files are not sent compressed:</p>\n<pre class=\"literal-block\">\nAddType text/css .css\n</pre>\n</li>\n<li><p class=\"first\">Optionally you can create static compressed copies and save some CPU on your server\nwith the GZIP_FILES option in Nikola.</p>\n</li>\n<li><p class=\"first\">The webassets Nikola plugin can drastically decrease the number of CSS and JS files your site fetches.</p>\n</li>\n<li><p class=\"first\">Through the filters feature, you can run your files through arbitrary commands, so that images\nare recompressed, JavaScript is minimized, etc.</p>\n</li>\n<li><p class=\"first\">The USE_CDN option offloads standard JavaScript and CSS files to a CDN so they are not\ndownloaded from your server.</p>\n</li>\n</ol>\n</div>\n<div class=\"section\" id=\"restructuredtext-extensions\">\n<h2><a class=\"toc-backref\" href=\"/stories/handbook.html#id37\">reStructuredText Extensions</a></h2>\n<p>Nikola includes support for a few directives and roles that are not part of docutils, but which\nwe think are handy for website development.</p>\n<div class=\"section\" id=\"mathjax\">\n<h3><a class=\"toc-backref\" href=\"/stories/handbook.html#id38\">MathJax</a></h3>\n<p>Nikola supports math input via MathJax.  It uses the usual math roles and\ndirectives of reStructuredText.</p>\n<p>In order to use them in your posts, you <strong>must</strong> add the special <tt class=\"docutils literal\">mathjax</tt> tag.</p>\n<p>Inline mathematics (equivalent to single dollar signs or backslash-parentheses\nin LaTeX) are produced using the <cite>math</cite> <strong>role</strong>:</p>\n<p>Euler’s formula: <span class=\"math\">\\(e^{ix} = \\cos x + i\\sin x\\)</span></p>\n<pre class=\"literal-block\">\nEuler’s formula: :math:`e^{ix} = \\cos x + i\\sin x`\n</pre>\n<p>Display mathematics (equivalent to double dollar signs or backslash-brackets in\nLaTeX) are produced using the <cite>math</cite> <strong>directive</strong>:</p>\n<div class=\"math\">\n\\begin{equation*}\n\\int \\frac{dx}{1+ax}=\\frac{1}{a}\\ln(1+ax)+C\n\\end{equation*}\n</div>\n<pre class=\"literal-block\">\n.. math::\n\n   \\int \\frac{dx}{1+ax}=\\frac{1}{a}\\ln(1+ax)+C\n</pre>\n</div>\n<div class=\"section\" id=\"media\">\n<h3><a class=\"toc-backref\" href=\"/stories/handbook.html#id39\">Media</a></h3>\n<p>This directive lets you embed media from a variety of sites automatically by just passing the\nURL of the page.  For example here are two random videos:</p>\n<pre class=\"literal-block\">\n.. media:: http://vimeo.com/72425090\n\n.. youtube:: http://www.youtube.com/watch?v=wyRpAat5oz0\n</pre>\n<p>It supports Instagram, Flickr, Github gists, Funny or Die, and dozens more, thanks to <a class=\"reference external\" href=\"https://github.com/coleifer/micawber\">Micawber</a></p>\n</div>\n<div class=\"section\" id=\"youtube\">\n<h3><a class=\"toc-backref\" href=\"/stories/handbook.html#id40\">YouTube</a></h3>\n<p>To link to a YouTube video, you need the id of the video. For example, if the\nURL of the video is <a class=\"reference external\" href=\"http://www.youtube.com/watch?v=8N_tupPBtWQ\">http://www.youtube.com/watch?v=8N_tupPBtWQ</a> what you need is\n<strong>8N_tupPBtWQ</strong></p>\n<p>Once you have that, all you need to do is:</p>\n<pre class=\"literal-block\">\n.. youtube:: 8N_tupPBtWQ\n</pre>\n</div>\n<div class=\"section\" id=\"vimeo\">\n<h3><a class=\"toc-backref\" href=\"/stories/handbook.html#id41\">Vimeo</a></h3>\n<p>To link to a Vimeo video, you need the id of the video. For example, if the\nURL of the video is <a class=\"reference external\" href=\"http://www.vimeo.com/20241459\">http://www.vimeo.com/20241459</a> then the id is <strong>20241459</strong></p>\n<p>Once you have that, all you need to do is:</p>\n<pre class=\"literal-block\">\n.. vimeo:: 20241459\n</pre>\n<p>If you have internet connectivity when generating your site, the height and width of\nthe embedded player will be set to the native height and width of the video.\nYou can override this if you wish:</p>\n<pre class=\"literal-block\">\n.. vimeo:: 20241459\n   :height: 240\n   :width: 320\n</pre>\n</div>\n<div class=\"section\" id=\"soundcloud\">\n<h3><a class=\"toc-backref\" href=\"/stories/handbook.html#id42\">Soundcloud</a></h3>\n<p>This directive lets you share music from <a class=\"reference external\" href=\"http://soundcloud.com\">http://soundcloud.com</a> You first need to get the\nID for the piece, which you can find in the \"share\" link. For example, if the\nWordPress code starts like this:</p>\n<pre class=\"literal-block\">\n[soundcloud url=\"http://api.soundcloud.com/tracks/78131362\"\n</pre>\n<p>The ID is 78131362 and you can embed the audio with this:</p>\n<pre class=\"literal-block\">\n.. soundcloud:: 78131362\n</pre>\n<p>You can also embed playlists, via the <cite>soundcloud_playlist</cite> directive which works the same way.</p>\n<blockquote>\n<iframe width=\"600\" height=\"160\" scrolling=\"no\" frameborder=\"no\" src=\"https://w.soundcloud.com/player/?url=http://api.soundcloud.com/playlists/9411706\">\n</iframe></blockquote>\n</div>\n<div class=\"section\" id=\"code\">\n<h3><a class=\"toc-backref\" href=\"/stories/handbook.html#id43\">Code</a></h3>\n<p>The <tt class=\"docutils literal\">code</tt> directive has been included in docutils since version 0.9 and now\nreplaces Nikola's <tt class=\"docutils literal\"><span class=\"pre\">code-block</span></tt> directive. To ease the transition, two aliases\nfor <tt class=\"docutils literal\">code</tt> directive are provided: <tt class=\"docutils literal\"><span class=\"pre\">code-block</span></tt> and <tt class=\"docutils literal\">sourcecode</tt>:</p>\n<pre class=\"literal-block\">\n.. code-block:: python\n   :number-lines:\n\n   print(\"Our virtues and our failings are inseparable\")\n</pre>\n</div>\n<div class=\"section\" id=\"listing\">\n<h3><a class=\"toc-backref\" href=\"/stories/handbook.html#id44\">Listing</a></h3>\n<p>To use this, you have to put your source code files inside <tt class=\"docutils literal\">listings</tt> or whatever your\n<tt class=\"docutils literal\">LISTINGS_FOLDER</tt> variable is set to. Assuming you have a <tt class=\"docutils literal\">foo.py</tt> inside that folder:</p>\n<pre class=\"literal-block\">\n.. listing:: foo.py python\n</pre>\n<p>Will include the source code from <tt class=\"docutils literal\">foo.py</tt>, highlight its syntax in python mode,\nand also create a <tt class=\"docutils literal\">listings/foo.py.html</tt> page and the listing will have a title linking to it.</p>\n<p>Listings support the same options <a class=\"reference external\" href=\"http://docutils.sourceforge.net/docs/ref/rst/directives.html#including-an-external-document-fragment\">reST includes</a> support (including\nvarious options for controlling which parts of the file are included), and also\na <tt class=\"docutils literal\">linenos</tt> option for Sphinx compatibility.</p>\n<div class=\"note\">\n<p class=\"first admonition-title\">Note</p>\n<p class=\"last\">Formerly, <tt class=\"docutils literal\"><span class=\"pre\">start-at</span></tt> and <tt class=\"docutils literal\"><span class=\"pre\">end-at</span></tt> options were supported; however,\nthey do not work anymore (since v6.1.0) and you should now use <tt class=\"docutils literal\"><span class=\"pre\">start-after</span></tt>\nand <tt class=\"docutils literal\"><span class=\"pre\">end-before</span></tt>, respectively.  You can also use <tt class=\"docutils literal\"><span class=\"pre\">start-line</span></tt> and\n<tt class=\"docutils literal\"><span class=\"pre\">end-line</span></tt>.</p>\n</div>\n</div>\n<div class=\"section\" id=\"gist\">\n<h3><a class=\"toc-backref\" href=\"/stories/handbook.html#id45\">Gist</a></h3>\n<p>You can easily embed GitHub gists with this directive, like this:</p>\n<pre class=\"literal-block\">\n.. gist:: 2395294\n</pre>\n<p>Producing this:</p>\n<script src=\"https://gist.github.com/2395294.js\"></script><noscript><pre class=\"literal-block\">\n#include &lt;stdlib.h&gt;\n#include &lt;stdio.h&gt;\n\nint nonHeapInt;\n\nstruct HeapObject\n{\n    int x;  // å çºå¦ææ¾ x ç pointerï¼å¯¦éä¸åæ¾ HeapObject çéé ­ pointer ç¸åï¼\n            // æä»¥æåå¿éå ä¸åyï¼è®æåæå® pointer æä¸ææå° HeapObject çéé ­ã\n    int y;\n};\n\nint main()\n{\n    struct HeapObject * heapObject = malloc(sizeof(struct HeapObject));\n\n    nonHeapInt = 10;\n    heapObject-&gt;y = 20;\n\n    printf(\"Start nonHeapInt:%d\\n\", nonHeapInt);\n    printf(\"Start heapObject-&gt;y:%d\\n\", heapObject-&gt;y);\n\n    // free(&amp;nonHeapInt); // GCC æè­¦åï¼å·è¡ glibc æä¸ invalid pointer exception\n    // free(&amp;(heapObject-&gt;y)); // éç¶ä¸ææ¯åï¼ä½ glibc éæ¯æä¸ invalid pointer exception\n\n    printf(\"End nonHeapInt:%d\\n\", nonHeapInt);\n    printf(\"End heapObject-&gt;y:%d\\n\", heapObject-&gt;y);\n\n}\n\n</pre>\n</noscript><p>This degrades gracefully if the browser doesn't support JavaScript.</p>\n</div>\n<div class=\"section\" id=\"slideshows\">\n<h3><a class=\"toc-backref\" href=\"/stories/handbook.html#id46\">Slideshows</a></h3>\n<p>To create an image slideshow, you can use the <tt class=\"docutils literal\">slides</tt> directive. For example:</p>\n<pre class=\"literal-block\">\n.. slides::\n\n   /galleries/demo/tesla_conducts_lg.jpg\n   /galleries/demo/tesla_lightning2_lg.jpg\n   /galleries/demo/tesla4_lg.jpg\n   /galleries/demo/tesla_lightning1_lg.jpg\n   /galleries/demo/tesla_tower1_lg.jpg\n</pre>\n</div>\n<div class=\"section\" id=\"chart\">\n<h3><a class=\"toc-backref\" href=\"/stories/handbook.html#id47\">Chart</a></h3>\n<p>This directive is a thin wrapper around <a class=\"reference external\" href=\"http://pygal.org/\">Pygal</a> and will produce charts\nas SVG files embedded directly in your pages.</p>\n<p>Here's an example of how it works:</p>\n<pre class=\"literal-block\">\n.. chart:: Bar\n   :title: 'Browser usage evolution (in %)'\n   :x_labels: [\"2002\", \"2003\", \"2004\", \"2005\", \"2006\", \"2007\"]\n\n   'Firefox', [None, None, 0, 16.6, 25, 31]\n   'Chrome',  [None, None, None, None, None, None]\n   'IE',      [85.8, 84.6, 84.7, 74.5, 66, 58.6]\n   'Others',  [14.2, 15.4, 15.3, 8.9, 9, 10.4]\n</pre>\n<p>The argument passed next to the directive (Bar in that example) is the type of chart, and can be one of\nLine, StackedLine, Bar, StackedBar, HorizontalBar, XY, DateY, Pie, Radar, Dot, Funnel, Gauge, Pyramid. For\nexamples of what each kind of graph is, <a class=\"reference external\" href=\"http://pygal.org/chart_types/\">check here</a></p>\n<p>It can take <em>a lot</em> of options to let you customize the charts (in the example, title and x_labels).\nYou can use any option described in <a class=\"reference external\" href=\"http://pygal.org/basic_customizations/\">the pygal docs</a></p>\n<p>Finally, the content of the directive is the actual data, in the form of a label and\na list of values, one series per line.</p>\n</div>\n<div class=\"section\" id=\"doc\">\n<h3><a class=\"toc-backref\" href=\"/stories/handbook.html#id48\">Doc</a></h3>\n<p>This role is useful to make links to other post or page inside the same site.</p>\n<p>Here's an example:</p>\n<pre class=\"literal-block\">\nTake a look at :doc:`my other post &lt;creating-a-theme&gt;` about theme creating.\n</pre>\n<p>In this case we are giving the portion of text we want to link. So, the result will be:</p>\n<blockquote>\nTake a look at <a class=\"reference external\" href=\"/stories/creating-a-theme.html\">my other post</a> about theme creating.</blockquote>\n<p>If we want to use the post's title as the link's text, just do:</p>\n<pre class=\"literal-block\">\nTake a look at :doc:`creating-a-theme` to know how to do it.\n</pre>\n<p>and it will produce:</p>\n<blockquote>\nTake a look at <a class=\"reference external\" href=\"/stories/creating-a-theme.html\">Creating a Theme</a> to know how to do it.</blockquote>\n</div>\n<div class=\"section\" id=\"post-list\">\n<h3><a class=\"toc-backref\" href=\"/stories/handbook.html#id49\">Post List</a></h3>\n<p>This directive can be used to generate a list of posts. You could use it, for\nexample, to make a list of the latest 5 blog posts, or a list of all blog posts\nwith the tag <tt class=\"docutils literal\">nikola</tt>:</p>\n<pre class=\"literal-block\">\nHere are my 5 latest and greatest blog posts:\n\n.. post-list::\n   :start: -5\n\nThese are all my posts about Nikola:\n\n.. post-list::\n   :tags: nikola\n</pre>\n<p>Note that you can give the <tt class=\"docutils literal\">tags</tt> option a comma-separated list of tags, in\nwhich case the list will show all posts that have at least one of those tags.\nOther interesting options include <tt class=\"docutils literal\">stop</tt> (set it to <tt class=\"docutils literal\"><span class=\"pre\">-1</span></tt>, for example, to\nshow all but the last post); <tt class=\"docutils literal\">reverse</tt> (set to <tt class=\"docutils literal\">True</tt> to sort the list in\nchronological order, instead of the default latest-post-first); <tt class=\"docutils literal\">lang</tt>\n(language to use for post titles and links); and <tt class=\"docutils literal\">slugs</tt> (allows you to filter\nby post slugs, instead of tags).</p>\n<p>The post list directive uses the <tt class=\"docutils literal\">post_list_directive.tmpl</tt> template file (or\nanother one, if you use the <tt class=\"docutils literal\">template</tt> option) to generate the list's HTML. By\ndefault, this is an unordered list with dates and clickable post titles. See\nthe template file in Nikola's base theme for an example of how this works.</p>\n</div>\n</div>\n<div class=\"section\" id=\"importing-your-wordpress-site-into-nikola\">\n<h2><a class=\"toc-backref\" href=\"/stories/handbook.html#id50\">Importing Your WordPress Site Into Nikola</a></h2>\n<p>If you like Nikola, and want to start using it, but you have a WordPress blog, Nikola\nsupports importing it. Here's the steps to do it:</p>\n<ol class=\"arabic simple\">\n<li>Get a XML dump of your site <a class=\"footnote-reference\" href=\"/stories/handbook.html#id7\" id=\"id6\">[1]</a></li>\n<li>nikola import_wordpress mysite.wordpress.2012-12-20.xml</li>\n</ol>\n<p>After some time, this will create a <tt class=\"docutils literal\">new_site</tt> folder with all your data. It currently supports\nthe following:</p>\n<ul>\n<li><p class=\"first\">All your posts and pages</p>\n</li>\n<li><p class=\"first\">Keeps \"draft\" status</p>\n</li>\n<li><p class=\"first\">Your tags and categories</p>\n</li>\n<li><p class=\"first\">Imports your attachments and fixes links to point to the right places</p>\n</li>\n<li><p class=\"first\">Will try to add redirects that send the old post URLs to the new ones</p>\n</li>\n<li><p class=\"first\">Will give you a url_map so you know where each old post was</p>\n<p>This is also useful for DISQUS thread migration!</p>\n</li>\n<li><p class=\"first\">Will try to convert the content of your posts. This is <em>not</em> error free, because\nWordPress uses some unholy mix of HTML and strange things. Currently we are treating it\nas markdown, which does a reasonable job of it.</p>\n<p>You will find your old posts in <tt class=\"docutils literal\"><span class=\"pre\">new_site/posts/post-title.wp</span></tt> in case you need to fix\nany of them.</p>\n</li>\n</ul>\n<p>This feature is a work in progress, and the only way to improve it is to have it used for\nas many sites as possible and make it work better each time, so I am happy to get requests\nabout it.</p>\n<table class=\"docutils footnote\" frame=\"void\" id=\"id7\" rules=\"none\">\n<colgroup><col class=\"label\"><col></colgroup>\n<tbody valign=\"top\">\n<tr><td class=\"label\"><a class=\"fn-backref\" href=\"/stories/handbook.html#id6\">[1]</a></td><td><p class=\"first\">The dump needs to be in 1.2 format. You can check by reading it, it should say\n<tt class=\"docutils literal\"><span class=\"pre\">xmlns:excerpt=\"http://wordpress.org/export/1.2/excerpt/\"</span></tt> near the top of the\nfile. If it says <tt class=\"docutils literal\">1.1</tt> instead of <tt class=\"docutils literal\">1.2</tt> you will have to update your\nWordPress before dumping.</p>\n<p class=\"last\">Other versions may or may not work.</p>\n</td></tr>\n</tbody>\n</table>\n<div class=\"section\" id=\"importing-to-a-custom-location-or-into-an-existing-site\">\n<h3><a class=\"toc-backref\" href=\"/stories/handbook.html#id51\">Importing To A Custom Location Or Into An Existing Site</a></h3>\n<p>It is possible to either import into a location you desire or into an already existing Nikola site.\nTo do so you can specify a location after the dump.:</p>\n<pre class=\"literal-block\">\n$ nikola import_wordpress  mysite.wordpress.2012-12-20.xml -o import_location\n</pre>\n<p>With this command Nikola will import into the folder <tt class=\"docutils literal\">import_location</tt>.</p>\n<p>If the folder already exists Nikola will not overwrite an existing <tt class=\"docutils literal\">conf.py</tt>.\nInstead a new file with a timestamp at the end of the filename will be created.</p>\n</div>\n</div>\n<div class=\"section\" id=\"using-twitter-cards\">\n<h2><a class=\"toc-backref\" href=\"/stories/handbook.html#id52\">Using Twitter Cards</a></h2>\n<p>Twitter Cards enable you to show additional information in Tweets that link\nto you content.\nNikola supports <a class=\"reference external\" href=\"https://dev.twitter.com/docs/cards\">Twitter Cards</a>.\nThey are implemented to use <em>Open Graph</em> tags whenever possible.</p>\n<div class=\"admonition-important admonition\">\n<p class=\"first admonition-title\">Important</p>\n<p class=\"last\">To use Twitter Cards you need to opt-in on Twitter.\nTo do so please use the form that can be found at <a class=\"reference external\" href=\"https://dev.twitter.com/form/participate-twitter-cards\">https://dev.twitter.com/form/participate-twitter-cards</a></p>\n</div>\n<p>To enable and configure your use of Twitter Cards please modify the\ncorresponding lines in your <tt class=\"docutils literal\">conf.py</tt>.\nAn example configuration that uses the Twitter nickname of the website\nand the authors Twitter user ID is found below.</p>\n<pre class=\"code python literal-block\">\n<span class=\"n\">TWITTER_CARD</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s\">'use_twitter_cards'</span><span class=\"p\">:</span> <span class=\"bp\">True</span><span class=\"p\">,</span>  <span class=\"c\"># enable Twitter Cards / Open Graph</span>\n    <span class=\"s\">'site'</span><span class=\"p\">:</span> <span class=\"s\">'@website'</span><span class=\"p\">,</span>  <span class=\"c\"># twitter nick for the website</span>\n    <span class=\"c\"># 'site:id': 123456,  # Same as site, but the website's Twitter user ID instead.</span>\n    <span class=\"c\"># 'creator': '@username',  # Username for the content creator / author.</span>\n    <span class=\"s\">'creator:id'</span><span class=\"p\">:</span> <span class=\"mi\">654321</span><span class=\"p\">,</span>  <span class=\"c\"># Same as creator, but the Twitter user's ID.</span>\n<span class=\"p\">}</span>\n</pre>\n</div>\n<div class=\"section\" id=\"custom-plugins\">\n<h2><a class=\"toc-backref\" href=\"/stories/handbook.html#id53\">Custom Plugins</a></h2>\n<p>You can create your own plugins (see <a class=\"reference external\" href=\"/stories/extending.html\">Extending Nikola</a>) and use them in your own\nsite by putting them in a <tt class=\"docutils literal\">plugins/</tt> folder.  You can also put them in\ndirectories listed in the <tt class=\"docutils literal\">EXTRA_PLUGINS_DIRS</tt> configuration variable.</p>\n</div>\n<div class=\"section\" id=\"getting-extra-plugins\">\n<h2><a class=\"toc-backref\" href=\"/stories/handbook.html#id54\">Getting Extra Plugins</a></h2>\n<p>If you want extra plugins, there is also the <a class=\"reference external\" href=\"http://plugins.getnikola.com/\">Plugins Index</a>.</p>\n<p>Similarly to themes, there is a nice, built-in command to manage them —\n<tt class=\"docutils literal\">plugin</tt>:</p>\n<pre class=\"literal-block\">\n$ nikola plugin -l\nPlugins:\n--------\nhelloworld\ntags\n⋮\n⋮\n\n$ nikola plugin --install helloworld\n[2013-10-12T16:51:56Z] NOTICE: install_plugin: Downloading: http://plugins.getnikola.com/v6/helloworld.zip\n[2013-10-12T16:51:58Z] NOTICE: install_plugin: Extracting: helloworld into plugins\nplugins/helloworld/requirements.txt\n[2013-10-12T16:51:58Z] NOTICE: install_plugin: This plugin has Python dependencies.\n[2013-10-12T16:51:58Z] NOTICE: install_plugin: Installing dependencies with pip...\n⋮\n⋮\n[2013-10-12T16:51:59Z] NOTICE: install_plugin: Dependency installation succeeded.\n[2013-10-12T16:51:59Z] NOTICE: install_plugin: This plugin has a sample config file.\nContents of the conf.py.sample file:\n\n    # Should the Hello World plugin say “BYE” instead?\n    BYE_WORLD = False\n</pre>\n<p>Then you also can uninstall your plugins:</p>\n<pre class=\"literal-block\">\n$ nikola plugin --uninstall tags\n[2014-04-15T08:59:24Z] WARNING: plugin: About to uninstall plugin: tags\n[2014-04-15T08:59:24Z] WARNING: plugin: This will delete /home/ralsina/foo/plugins/tags\nAre you sure? [y/n] y\n[2014-04-15T08:59:26Z] WARNING: plugin: Removing /home/ralsina/foo/plugins/tags\n</pre>\n<p>And upgrade them:</p>\n<pre class=\"literal-block\">\n$ nikola plugin --upgrade\n[2014-04-15T09:00:18Z] WARNING: plugin: This is not very smart, it just reinstalls some plugins and hopes for the best\nWill upgrade 1 plugins: graphviz\nUpgrading graphviz\n[2014-04-15T09:00:20Z] INFO: plugin: Downloading: http://plugins.getnikola.com/v7/graphviz.zip\n[2014-04-15T09:00:20Z] INFO: plugin: Extracting: graphviz into /home/ralsina/.nikola/plugins/\n[2014-04-15T09:00:20Z] NOTICE: plugin: This plugin has third-party dependencies you need to install manually.\nContents of the requirements-nonpy.txt file:\n\n    Graphviz\n        http://www.graphviz.org/\n\nYou have to install those yourself or through a package manager.\n</pre>\n<p>You can also share plugins you created with the community!  Visit the\n<a class=\"reference external\" href=\"https://github.com/getnikola/plugins\">GitHub repository</a> to find out more.</p>\n<p>You can use the plugins in this repository without installing them into your\nsite, by cloning the repository and adding the path of the plugins directory to\nthe <tt class=\"docutils literal\">EXTRA_PLUGINS_DIRS</tt> list in your configuration.</p>\n</div>\n<div class=\"section\" id=\"shell-tab-completion\">\n<h2><a class=\"toc-backref\" href=\"/stories/handbook.html#id55\">Shell Tab Completion</a></h2>\n<p>Since Nikola is a command line tool, and this is the 21st century, it's handy to have smart tab-completion\nso that you don't have to type the full commands.</p>\n<p>To enable this, you can use the <tt class=\"docutils literal\">nikola tabcompletion</tt> command like this, depending on your shell:</p>\n<pre class=\"literal-block\">\n$ nikola tabcompletion --shell bash --hardcode-tasks &gt; _nikola_bash\n$ nikola tabcompletion --shell zsh --hardcode-tasks &gt; _nikola_zsh\n</pre>\n<p>The <tt class=\"docutils literal\"><span class=\"pre\">--hardcode-tasks</span></tt> adds tasks to the completion and may need updating periodically.</p>\n</div>\n<div class=\"section\" id=\"license\">\n<h2><a class=\"toc-backref\" href=\"/stories/handbook.html#id56\">License</a></h2>\n<p>Nikola is released under a <a class=\"reference external\" href=\"https://github.com/getnikola/nikola/blob/master/LICENSE.txt\">MIT license</a> which\nis a free software license. Some components shipped along with Nikola, or required by it are\nreleased under other licenses.</p>\n<p>If you are not familiar with free software licensing: In general, you should be able to\ndo pretty much anything you want, unless you modify Nikola. If you modify it, and share\nit with someone else, that someone else should get all your modifications under the same\nlicense you got it.</p>\n</div></div>",
  "is_mathjax": true,
  "enable_comments": false,
  "tags": [
    {
      "link": "/categories/mathjax.html",
      "name": "mathjax",
      "id": "/categories/mathjax.html.json"
    }
  ],
  "formatted_date": "2012-03-30 23:00",
  "date": "2012-03-30T23:00:00-03:00",
  "is_draft": false,
  "is_private": false,
  "prev_post": null,
  "permalink": "/stories/handbook.html",
  "id_comments": "cache/stories/manual.html",
  "text_stripped": "Version:\n7.1.0\n\n\n\nContents\n\nAll You Need to Know\nWhat's Nikola and what can you do with it?\nGetting Help\nWhy Static?\nFeatures\nInstalling Nikola\nlibxml/libxslt errors\nPython.h not found\nInstallation on Linux, Mac OS X, *BSD, and any other POSIX-compatible OS\nInstallation on Windows and Windows support\n\n\nGetting Started\nCreating a Blog Post\nTeasers\nDrafts\nPrivate (formerly retired) Posts\nQueuing Posts\nPost Types\n\n\nCreating a Page\nRedirections\nConfiguration\nCustomizing Your Site\nAdding Files\nGetting More Themes\nDeployment\nDeploying to GitHub\n\n\nComments and Annotations\nImage Galleries\nPost Processing Filters\nOptimizing Your Website\nreStructuredText Extensions\nMathJax\nMedia\nYouTube\nVimeo\nSoundcloud\nCode\nListing\nGist\nSlideshows\nChart\nDoc\nPost List\n\n\nImporting Your WordPress Site Into Nikola\nImporting To A Custom Location Or Into An Existing Site\n\n\nUsing Twitter Cards\nCustom Plugins\nGetting Extra Plugins\nShell Tab Completion\nLicense\n\n\n\nAll You Need to Know\nAfter you have Nikola installed:\n\nCreate a empty site (with a setup wizard):\nnikola init mysite\n\nYou can create a site with demo files in it with nikola init --demo mysite\nThe rest of these commands have to be executed inside the new mysite folder.\n\nCreate a post:\nnikola new_post\nEdit the post:\nThe filename should be in the output of the previous command.\nBuild the site:\nnikola build\nStart the test server:\nnikola serve\nSee the site:\nhttp://127.0.0.1:8000\n\nThat should get you going. If you want to know more, this manual will always be here\nfor you.\nDON'T READ THIS MANUAL. IF YOU NEED TO READ IT I FAILED, JUST USE THE THING.\nOn the other hand, if anything about Nikola is not as obvious as it should be, by all\nmeans tell me about it :-)\n\n\nWhat's Nikola and what can you do with it?\nNikola is a static website and blog generator. The very short explanation is\nthat it takes some texts you wrote, and uses them to create a folder full\nof HTML files. If you upload that folder to a server, you will have a\nrather full-featured website, done with little effort.\nIt's original goal is to create blogs, but it supports most kind of sites, and\ncan be used as a CMS, as long as what you present to the user is your own content\ninstead of something the user generates.\nNikola can do:\n\nA blog (example)\nYour company's site\nYour personal site\nA software project's site (example)\nA book's site\n\nSince Nikola-based sites don't run any code on the server, there is no way to process\nuser input in forms.\nNikola can't do:\n\nTwitter\nFacebook\nAn Issue tracker\nAnything with forms, really (except for comments!)\n\nKeep in mind that \"static\" doesn't mean boring. You can have animations, slides\nor whatever fancy CSS/HTML5 thingie you like. It only means all that HTML is\ngenerated already before being uploaded. On the other hand, Nikola sites will\ntend to be content-heavy. What Nikola is good at is at putting what you write\nout there.\n\n\nGetting Help\nGet help here!\nTL;DR:\n\nYou can file bugs at the issue tracker\nYou can discuss Nikola at the nikola-discuss google group\nYou can subscribe to the Nikola Blog\nYou can follow Nikola on Twitter\n\n\n\nWhy Static?\nMost \"modern\" websites are dynamic in the sense that the contents of the site\nlive in a database, and are converted into presentation-ready HTML only when a\nuser wants to see the page. That's great. However, it presents some minor issues\nthat static site generators try to solve.\nIn a static site, the whole site, every page, everything, is created before\nthe first user even sees it and uploaded to the server as a simple folder full\nof HTML files (and images, CSS, etc).\nSo, let's see some reasons for using static sites:\n\nSecurity\nDynamic sites are prone to experience security issues. The solution for that\nis constant vigilance, keeping the software behind the site updated, and\nplain old good luck. The stack of software used to provide a static site,\nlike those Nikola generates, is much smaller (Just a web server).\nA smaller software stack implies less security risk.\n\nObsolescense\nIf you create a site using (for example) WordPress, what happens when WordPress\nreleases a new version? You have to update your WordPress. That is not optional,\nbecause of security and support issues. If I release a new version of Nikola, and\nyou don't update, nothing happens. You can continue to use the version you\nhave now forever, no problems.\nAlso, in the longer term, the very foundations of dynamic sites shift. Can you\nstill deploy a blog software based on Django 0.96? What happens when your\nhost stops supporting the php version you rely on? And so on.\nYou may say those are long term issues, or that they won't matter for years. Well,\nI believe things should work forever, or as close to it as we can make them.\nNikola's static output and its input files will work as long as you can install\na Python > 2.6 in a Linux, Windows, or Mac and can find a server\nthat sends files over HTTP. That's probably 10 or 15 years at least.\nAlso, static sites are easily handled by the Internet Archive.\n\nCost and Performance\nOn dynamic sites, every time a reader wants a page, a whole lot of database\nqueries are made. Then a whole pile of code chews that data, and HTML is\nproduced, which is sent to the user. All that requires CPU and memory.\nOn a static site, the highly optimized HTTP server reads the file from disk\n(or, if it's a popular file, from disk cache), and sends it to the user. You could\nprobably serve a bazillion (technical term) pageviews from a phone using\nstatic sites.\n\nLock-in\nOn server-side blog platforms, sometimes you can't export your own data, or\nit's in strange formats you can't use in other services. I have switched\nblogging platforms from Advogato to PyCs to two homebrew systems, to Nikola,\nand have never lost a file, a URL, or a comment. That's because I have always\nhad my own data in a format of my choice.\nWith Nikola, you own your files, and you can do anything with them.\n\n\n\n\nFeatures\nNikola has a very defined feature set: it has every feature I needed for my own sites.\nHopefully, it will be enough for others, and anyway, I am open to suggestions.\nIf you want to create a blog or a site, Nikola provides:\n\nFront page (and older posts pages)\nRSS Feeds\nPages and feeds for each tag you used\nCustom search\nFull yearly archives\nCustom output paths for generated pages\nEasy page template customization\nStatic pages (not part of the blog)\nInternationalization support (my own blog is English/Spanish)\nGoogle sitemap generation\nCustom deployment (if it's a command, you can use it)\nA (very) basic look and feel you can customize, and is even text-mode friendly\nThe input format is light markup (reStructuredText or\nMarkdown)\nEasy-to-create image galleries\nSupport for displaying source code\nImage slideshows\nClient-side cloud tags\n\nAlso:\n\nA preview web server\n\"Live\" re-rendering while you edit\n\"Smart\" builds: only what changed gets rebuilt (usually in seconds)\nEasy to extend with minimal Python knowledge.\n\n\n\nInstalling Nikola\nThis is currently lacking on detail. Considering the niche Nikola is aimed at,\nI suspect that's not a problem yet. So, when I say \"get\", the specific details\nof how to \"get\" something for your specific operating system are left to you.\nThe short version is:\n\npip install nikola\n\nNote that you need Python v2.6 or newer OR v3.3 or newer.\nSome features require extra dependencies.  You can install them all in bulk\nby doing:\n\npip install nikola[extras]\n\nAlternatively, you can install those packages one-by-one, when required (Nikola\nwill tell you what packages are needed)\nAfter that, run nikola init --demo sitename and that will run the setup\nwizard, which will create a folder called sitename containing a functional\ndemo site.\nNikola is packaged for some Linux distributions, you may get that instead. e.g.\nIf you are running Arch Linux, there are AUR packages, available in Python 2/3\nand stable/git master flavors: python-nikola / python2-nikola for the\nlatest stable release or python-nikola-git / python2-nikola-git for the\nGitHub master.  (only one package may be installed at the same time.)\n\nlibxml/libxslt errors\nIf you get a ERROR: /bin/sh: 1: xslt-config: not found or fatal error:\nlibxml/xmlversion.h: No such file or directory when running pip install -r requirements.txt, install libxml and libxslt libraries, like so:\nDebian systems:\n\nsudo apt-get install libxml2-dev\nsudo apt-get install libxslt1-dev\n\nRed Hat/RPM-based systems:\n\nsudo yum install libxslt-devel libxml2-devel\n\n\n\nPython.h not found\nIf you get an error to the effect of Python.h not found, you need to\ninstall development packages for Python.\nDebian systems:\n\nsudo apt-get install python-dev\n\nRed Hat/RPM-based systems:\n\nsudo yum install python-devel\n\nNote that many other distros/operating systems (including Arch Linux,\n*BSD and OS X) do not require such packages, as C headers are included\nwith the base distribution of Python.\n\n\nInstallation on Linux, Mac OS X, *BSD, and any other POSIX-compatible OS\n(we obviously support all.)\nUsing pip should suffice.  You may also want to use distribution- or\nsystem-specific packages for our dependencies.\nThere are no known issues or caveats on those OSes.  Keep in mind that most\nof our developers run Linux on a daily basis and may not have the full\nknowledge required to resolve issues relating to your operating system.\n\n\nInstallation on Windows and Windows support\nNikola supports Windows!  Keep in mind, though, that there are some\ncaveats:\n\nlxml and Pillow require compiled extensions.  Compiling them on\nWindows is hard for most people.  Fortunately, compiled packages exist.\nCheck their PyPI pages to find official packages,\nthe unofficial Gohlke binaries\nsite, or get them somewhere else.  If you are using virtualenvs, using those\npre-built packages is possible through virtualenv --system-site-packages.\nWindows has some differences over POSIX, which may cause some features to\nwork incorrectly under Windows.  If any problems occur, please do not\nhesitate to report them.  Some of the differences include:\n\\ as path separator (instead of /)\nthe concept of HDD partitions and letters (instead of\nseamless mounting under one root)\nsome characters in paths are disallowed (although this shouldn’t cause\nproblems)\nCR+LF (aka \\r\\n) as the line separator (instead of LF \\n)\n\n\nMost of our developers run Linux on a daily basis and may not have the full\nknowledge required to resolve issues relating to Windows.\n\n\n\n\nGetting Started\nTo create posts and pages in Nikola, you write them in one of the supported input formats.\nThose source files are later converted to HTML\nThe recommended formats are reStructuredText and Markdown, but there is also support\nfor textile and WikiCreole and even for just writing HTML.\n\nNote\nThere is a great quick tutorial to learn reStructuredText.\n\nFirst, let's see how you \"build\" your site. Nikola comes with a minimal site to get you started.\nThe tool used to do builds is called doit, and it rebuilds the\nfiles that are not up to date, so your site always reflects your latest content. To do our\nfirst build, just run \"nikola build\":\n\n$ nikola build\nScanning posts....done!\n.  render_posts:stories/manual.html\n.  render_posts:posts/1.html\n.  render_posts:stories/1.html\n.  render_archive:output/2012/index.html\n.  render_archive:output/archive.html\n.  render_indexes:output/index.html\n.  render_pages:output/posts/welcome-to-nikola.html\n.  render_pages:output/stories/about-nikola.html\n.  render_pages:output/stories/handbook.html\n.  render_rss:output/rss.xml\n.  render_sources:output/stories/about-nikola.txt\n⋮\n⋮\n⋮\n\nNikola will print a line for every output file it generates. If we do it again, that\nwill be much much shorter:\n\n$ nikola build\nScanning posts....done!\n\nThat is because doit is smart enough not to generate\nall the pages again, unless you changed something that the page requires. So, if you change\nthe text of a post, or its title, that post page, and all index pages where it is mentioned,\nwill be recreated. If you change the post page template, then all the post pages will be rebuilt.\nNikola is mostly a series of doit tasks, and you can see them by doing nikola list:\n\n$ nikola list\nScanning posts....done!\nbuild_bundles\ncopy_assets\ncopy_files\ndeploy\nredirect\nrender_archive\nrender_galleries\nrender_indexes\nrender_listings\nrender_pages\nrender_posts\nrender_rss\nrender_site\nrender_sources\nrender_tags\nsitemap\n\nYou can make Nikola redo everything by calling nikola forget and then nikola build (or nikola build -a,\nyou can make it do just a specific part of the site using task names, for example nikola build render_pages,\nand even individual files like nikola build output/index.html\nNikola also has other commands besides build:\n\n$ nikola help\nNikola is a tool to create static websites and blogs. For full documentation and more information, please visit http://getnikola.com/\n\n\nAvailable commands:\n  nikola auto                 automatically detect site changes, rebuild and optionally refresh a browser\n  nikola bootswatch_theme     given a swatch name from bootswatch.com and a parent theme, creates a custom theme\n  nikola build                run tasks\n  nikola check                check links and files in the generated site\n  nikola clean                clean action / remove targets\n  nikola console              start an interactive Python console with access to your site\n  nikola deploy               deploy the site\n  nikola doit_auto            automatically execute tasks when a dependency changes\n  nikola dumpdb               dump dependency DB\n  nikola forget               clear successful run status from internal DB\n  nikola github_deploy        deploy the site to GitHub pages\n  nikola help                 show help\n  nikola ignore               ignore task (skip) on subsequent runs\n  nikola import_wordpress     import a WordPress dump\n  nikola init                 create a Nikola site in the specified folder\n  nikola install_theme        install theme into current site\n  nikola list                 list tasks from dodo file\n  nikola new_page             create a new page in the site\n  nikola new_post             create a new blog post or site page\n  nikola orphans              list all orphans\n  nikola plugin               manage plugins\n  nikola serve                start the test webserver\n  nikola strace               use strace to list file_deps and targets\n  nikola tabcompletion        generate script for tab-completion\n  nikola version              print the Nikola version number\n\n  nikola help                 show help / reference\n  nikola help <command>       show command usage\n  nikola help <task-name>     show task usage\n\nThe serve command starts a web server so you can see the site you are creating:\n\n$ nikola serve -b\nServing HTTP on 127.0.0.1 port 8000 ...\n\nAfter you do this, a web browser opens at http://127.0.0.1:8000/ and you should see\nthe sample site. This is useful as a \"preview\" of your work.\nBy default, the serve command runs the web server on port 8000 on the IP address 127.0.0.1.\nYou can pass in an IP address and port number explicitly using -a IP_ADDRESS\n(short version of --address) or -p PORT_NUMBER (short version of --port)\nExample usage:\n\n$ nikola serve --address 0.0.0.0 --port 8080\nServing HTTP on 0.0.0.0 port 8080 ...\n\n\n\nCreating a Blog Post\nTo create a new post, the easiest way is to run nikola new_post. You  will\nbe asked for a title for your post, and it will tell you where the post's file\nis located.\nBy default, that file will contain also some extra information about your post (\"the metadata\").\nIt can be placed in a separate file by using the -2 option, but it's generally\neasier to keep it in a single location.\nThe contents of your post have to be written (by default) in reStructuredText\nbut you can use a lot of different markups using the -f option.\nCurrently Nikola supports reStructuredText, Markdown, IPython Notebooks, HTML as input,\ncan also use Pandoc for conversion, and has support for BBCode, CreoleWiki, txt2tags, Textile\nand more via plugins.\nYou can control what markup compiler is used for each file extension with the COMPILERS\noption. The default configuration expects them to be placed in posts but that can be\nchanged (see below, the POSTS and PAGES options)\nThis is how it works:\n\n$ nikola new_post\nCreating New Post\n-----------------\n\nEnter title: How to make money\nYour post's text is at:  posts/how-to-make-money.txt\n\nThe content of that file is as follows:\n\n.. title: How to make money\n.. slug: how-to-make-money\n.. date: 2012-09-15 19:52:05 UTC\n.. tags:\n.. link:\n.. description:\n.. type: text\n\nWrite your post here.\n\nThe slug is the page name. Since often titles will have\ncharacters that look bad on URLs, it's generated as a \"clean\" version of the title.\nThe third line is the post's date, and is set to \"now\".\nThe other lines are optional. Tags are comma-separated. The link is an original\nsource for the content, and description is mostly useful for SEO.\ntype is the post type, whatever you set here (prepended with post-)\nwill become a CSS class of the <article> element for this post.  Defaults to\ntext (resulting in a post-text class)\nYou can add your own metadata fields in the same manner, if you use a theme that\nsupports them (for example: .. author: John Doe)\nTo add these metadata fields to all new posts by default, you can set the\nvariable ADDITIONAL_METADATA in your configuration.  For example, you can\nadd the author metadata to all new posts by default, by adding the following\nto your configuration:\n\nADDITIONAL_METADATA = {\n    'author': 'John Doe'\n}\n\n\nOther Metadata Fields\nNikola will also use other metadata fields:\n\nauthor\nAuthor of the post, will be used in the RSS feed and possibly in the post\ndisplay (theme-dependent)\nannotations / noannotations\nOverride the value of the ANNOTATIONS option for this specific post or page.\ncategory\nLike tags, except each post can have only one, and they usually have\nmore descriptive names.\nhidetitle\nSet \"True\" if you do not want to see the story title as a\nheading of the page (does not work for posts).\nnocomments\nSet to \"True\" to disable comments. Example:\n\n.. nocomments: True\n\n\npassword\nThe post will be encrypted and invisible until the reader enters the password.\nAlso, the post's sourcecode will not be available.\npreviewimage\nDesignate a preview or other representative image path relative to BASE_URL\nfor use with Open Graph for posts. Adds the image when sharing on social\nmedia and many other uses.\n\n\n\nThe image can be of any size and dimension (services will crop and adapt)\nbut should less than 1 MB and be larger than 300x300 (ideally 600x600).\n\ntemplate\nWill change the template used to render this page/post specific page. Example:\n\n.. template: story.tmpl\n\nThat template needs to either be part of the theme, or be placed in a templates/\nfolder inside your site.\n\n\n\n\nNote\nThe Two-File Format\nNikola originally used a separate .meta file. That will still work!\nThe format of the meta files is the same as shown above (i.e. only\nthe 7 base fields, in the order listed above), but without the\nexplanations:\n\nHow to make money\nhow-to-make-money\n2012-09-15 19:52:05 UTC\n\nHowever, starting with Nikola v7, you can now use .meta files and put\nall metadata you want, complete with the explanations — they look just like\nthe beginning of our reST files.\n\n\n\n\n\nBoth file formats are supported; however, the new format is preferred, if\npossible.\n\nIf you are writing a multilingual site, you can also create a per-language\npost file (for example: how-to-make-money.es.txt with the default TRANSLATIONS_PATTERN, see below).\nThis one can replace metadata of the default language, for example:\n\nThe translated title for the post or page\nA translated version of the page name\n\nThe pattern used for finding translations is controlled by the\nTRANSLATIONS_PATTERN variable in your configuration file.\nThe default is to put the language code before the file extension,\nso the German translation of some_file.rst should be named\nsome_file.de.rst. This is because the TRANSLATIONS_PATTERN variable is by\ndefault set to:\n\nTRANSLATIONS_PATTERN = \"{path}.{lang}.{ext}\"\n\n\nNote\nConsidered languages\nNikola will only look for translation of input files for languages\nspecified in the TRANSLATIONS variable.\n\nYou can edit these files with your favourite text editor, and once you are happy\nwith the contents, generate the pages as explained in Getting Started\nCurrently supported languages are:\n\nBasque\nBulgarian\nCatalan\nChinese (Simplified)\nCroatian\nCzech\nDutch\nEnglish\nEsperanto\nEstonian\nFinnish\nFrench\nGerman\nGreek\nHindi\nItalian\nJapanese\nNorwegian Bokmål\nPersian\nPolish\nPortuguese (Brasil)\nRussian\nSlovak\nSlovene\nSpanish\nTurkish\nUrdu\n\nIf you wish to add support for more languages, check out the instructions\nat the theming guide.\nThe post page is generated using the post.tmpl template, which you can use\nto customize the output.\nThe place where the post will be placed by new_post is based on the POSTS\nand PAGES configuration options:\n\n# POSTS and PAGES contains (wildcard, destination, template) tuples.\n#\n# The wildcard is used to generate a list of reSt source files\n# (whatever/thing.txt).\n#\n# That fragment could have an associated metadata file (whatever/thing.meta),\n# and optionally translated files (example for Spanish, with code \"es\"):\n#     whatever/thing.es.txt and whatever/thing.es.meta\n#\n#     This assumes you use the default TRANSLATIONS_PATTERN.\n#\n# From those files, a set of HTML fragment files will be generated:\n# cache/whatever/thing.html (and maybe cache/whatever/thing.html.es)\n#\n# These files are combined with the template to produce rendered\n# pages, which will be placed at\n# output / TRANSLATIONS[lang] / destination / pagename.html\n#\n# where \"pagename\" is the \"slug\" specified in the metadata file.\n#\n# The difference between POSTS and PAGES is that POSTS are added\n# to feeds and are considered part of a blog, while PAGES are\n# just independent HTML pages.\n#\n\nPOSTS = (\n    (\"posts/*.txt\", \"posts\", \"post.tmpl\"),\n    (\"posts/*.rst\", \"posts\", \"post.tmpl\"),\n)\nPAGES = (\n    (\"stories/*.txt\", \"stories\", \"story.tmpl\"),\n    (\"stories/*.rst\", \"stories\", \"story.tmpl\"),\n)\n\nnew_post will use the first path in POSTS (or PAGES if -p is\nsupplied) that ends with the extension of your desired markup format (as\ndefined in COMPILERS in conf.py) as the directory that the new post will be\nwritten into.  If no such entry can be found, the post won’t be created.\nThe new_post command supports some options:\n\n$ nikola help new_post\nPurpose: Create a new blog post or site page.\nUsage:   nikola new_post [options] [path]\n\nOptions:\n  -p, --page                Create a page instead of a blog post.\n  -t ARG, --title=ARG       Title for the page/post.\n  --tags=ARG                Comma-separated tags for the page/post.\n  -1                        Create post with embedded metadata (single file format)\n  -2                        Create post with separate metadata (two file format)\n  -f ARG, --format=ARG      Markup format for post, one of rest, markdown, wiki, bbcode, html, textile, txt2tags\n\nThe optional path parameter tells nikola exactly where to put it instead of guessing from your config.\nSo, if you do nikola new_post posts/random/foo.txt you will have a post in that path, with\n\"foo\" as its slug.\n\nTeasers\nYou may not want to show the complete content of your posts either on your\nindex page or in RSS feeds, but to display instead only the beginning of them.\nIf it's the case, you only need to add a \"magical comment\" in your post.\nIn reStructuredText:\n\n.. TEASER_END\n\nIn Markdown:\n\n<!-- TEASER_END -->\n\nBy default all your RSS feeds will be shortened (they'll contain only teasers)\nwhereas your index page will still show complete posts. You can change\nthis behaviour with your conf.py: INDEX_TEASERS defines whether index\npage should display the whole contents or only teasers. RSS_TEASERS\nworks the same way for your RSS feeds.\nBy default, teasers will include a \"read more\" link at the end. If you want to\nchange that text, you can use a custom teaser:\n\n.. TEASER_END: click to read the rest of the article\n\nOr you can completely customize the link using the READ_MORE_LINK option:\n\n# A HTML fragment with the Read more... link.\n# The following tags exist and are replaced for you:\n# {link}        A link to the full post page.\n# {read_more}   The string “Read more” in the current language.\n# {{            A literal { (U+007B LEFT CURLY BRACKET)\n# }}            A literal } (U+007D RIGHT CURLY BRACKET)\n# READ_MORE_LINK = '<p class=\"more\"><a href=\"{link}\">{read_more}…</a></p>'\n\n\n\nDrafts\nIf you add a \"draft\" tag to a post, then it will not be shown in indexes and feeds.\nIt will be compiled, and if you deploy it it will be made available, so use\nwith care. If you wish your drafts to be not available in your deployed site, you\ncan set DEPLOY_DRAFTS = False in your configuration.\nAlso if a post has a date in the future, it will not be shown in indexes until\nyou rebuild after that date. This behaviour can be disabled by setting\nFUTURE_IS_NOW = True in your configuration, which will make future posts be\npublished immediately.  Posts dated in the future are not deployed by default\n(when FUTURE_IS_NOW = False).  To make future posts available in the\ndeployed site, you can set DEPLOY_FUTURE = True in your configuration.\nGenerally, you want FUTURE_IS_NOW and DEPLOY_FUTURE to be the same value.\n\n\nPrivate (formerly retired) Posts\nIf you add a \"private\" tag to a post, then it will not be shown in indexes and feeds.\nIt will be compiled, and if you deploy it it will be made available, so it will\nnot generate 404s for people who had linked to it.\n\n\nQueuing Posts\nSome blogs tend to have new posts based on a schedule (for example,\nevery Mon, Wed, Fri) but the blog authors don't like to manually\nschedule their posts.  You can schedule your blog posts based on a\nrule, by specifying a rule in the SCHEDULE_RULE in your\nconfiguration.  You can either post specific blog posts according to\nthis schedule by using the --schedule flag on the new_post\ncommand or post all new posts according to this schedule by setting\nSCHEDULE_ALL = True in your configuration. (Note: This feature\nrequires that the FUTURE_IS_NOW setting is set to False)\nFor example, if you would like to schedule your posts to be on every\nMonday, Wednesday and Friday at 7am, add the following\nSCHEDULE_RULE to your configuration\n\nSCHEDULE_RULE = 'RRULE:FREQ=WEEKLY;BYDAY=MO,WE,FR;BYHOUR=7;BYMINUTE=0;BYSECOND=0'\n\nFor more details on how to specify a recurrence rule, look at the\niCal specification.\nSay, you get a free Sunday, and want to write a flurry of new posts,\nor at least posts for the rest of the week, you would run the\nnew_post command with the --schedule flag, as many times as\nyou want:\n\n$ nikola new_post --schedule\n# Creates a new post to be posted on Monday, 7am.\n$ nikola new_post -s\n# Creates a new post to be posted on Wednesday, 7am.\n$ nikola new_post -s\n# Creates a new post to be posted on Friday, 7am.\n.\n.\n.\n\nAll these posts get queued up according to your schedule, but note\nthat you will anyway need to build and deploy your site for the posts\nto appear online.  You can have a cron job that does this regularly.\n\n\nPost Types\nNikola supports specifying post types, just like Tumblr does.  Post\ntypes affect the look of your posts, by adding a post-YOURINPUTHERE\nCSS class to the post.  Each post can have one and exactly one type.  Nikola\nstyles the following types in the default themes:\n\n\n\n\n\n\n\nName(s)\nDescription\nStyling\n\n\n\ntext\nplain text — default value\nstandard\n\nmicro\n“small” (short) posts\nbig serif font\n\n\n\n\n\n\nCreating a Page\nPages are the same as posts, except that:\n\nThey are not added to the front page\nThey don't appear on the RSS feed\nThey use the story.tmpl template instead of post.tmpl by default\n\nThe default configuration expects the page's metadata and text files to be on the\nstories folder, but that can be changed (see PAGES option above).\nYou can create the page's files manually or use the new_post command\nwith the -p option, which will place the files in the folder that\nhas use_in_feed set to False.\n\n\nRedirections\nIf you need a page to be available in more than one place, you can define redirections\nin your conf.py:\n\n# A list of redirection tuples, [(\"foo/from.html\", \"/bar/to.html\")].\n#\n# A HTML file will be created in output/foo/from.html that redirects\n# to the \"/bar/to.html\" URL. notice that the \"from\" side MUST be a\n# relative URL.\n#\n# If you don't need any of these, just set to []\n\nREDIRECTIONS = [(\"index.html\", \"/weblog/index.html\")]\n\nIt's better if you can do these using your web server's configuration, but if\nyou can't, this will work.\n\n\nConfiguration\nThe configuration file is called conf.py and can be used to customize a lot of\nwhat Nikola does. Its syntax is python, but if you don't know the language, it\nstill should not be terribly hard to grasp.\nThe default conf.py you get with Nikola should be fairly complete, and is quite\ncommented.\nYou surely want to edit these options:\n\n# Data about this site\nBLOG_AUTHOR = \"Your Name\"  # (translatable)\nBLOG_TITLE = \"Demo Site\"  # (translatable)\nSITE_URL = \"http://getnikola.com/\"\nBLOG_EMAIL = \"joe@demo.site\"\nBLOG_DESCRIPTION = \"This is a demo site for Nikola.\"  # (translatable)\n\nSome options are demarked with a (translatable) comment above or right next to\nthem.  For those options, two types of values can be provided:\n\n\na string, which will be used for all languages\na dict of language-value pairs, to have different values in each language\n\n\n\n\nCustomizing Your Site\nThere are lots of things you can do to personalize your website, but let's see\nthe easy ones!\n\nCSS tweaking\nUsing the default configuration, you can create a assets/css/custom.css\nfile and then it will be loaded from the <head> blocks of your site\npages.  Create it and put your CSS code there, for minimal disruption of the\nprovided CSS files.\nIf you feel tempted to touch other files in assets, you probably will be better off\nwith a custom theme.\nIf you want to use LESS or Sass for your custom CSS, or the theme you use\ncontains LESS or Sass code that you want to override, you will need to install\nthe LESS plugin or\nSASS plugin create a less or\nsass directory in your site root, put your .less or .scss files\nthere and a targets file containing the list of files you want compiled.\n\n\n\nTemplate tweaking\nIf you really want to change the pages radically, you will want to do a\ncustom theme.\nNavigation Links\nThe NAVIGATION_LINKS option lets you define what links go in a sidebar or menu\n(depending on your theme) so you can link to important pages, or to other sites.\nThe format is a language-indexed dictionary, where each element is a tuple of\ntuples which are one of:\n\nA (url, text) tuple, describing a link\nA (((url, text), (url, text), (url, text)), title) tuple, describing a submenu / sublist.\n\nExample:\n\nNAVIGATION_LINKS = {\n    DEFAULT_LANG: (\n        ('/archive.html', 'Archives'),\n        ('/categories/index.html', 'Tags'),\n        ('/rss.xml', 'RSS'),\n        ((('/foo', 'FOO'),\n          ('/bar', 'BAR')), 'BAZ'),\n    ),\n}\n\n\nNote\nSupport for submenus is theme-dependent.  Only one level of\nsubmenus is supported.\n\n\nNote\nSome themes, including the default Bootstrap 3 theme, may\npresent issues if the menu is too large.  (in bootstrap3, the\nnavbar can grow too large and cover contents.)\n\nThe SEARCH_FORM option contains the HTML code for a search form based on\nduckduckgo.com which should always work, but feel free to change it to\nsomething else.\n\nFooter\nCONTENT_FOOTER is displayed, small at the bottom of all pages, I use it for\nthe copyright notice. The default shows a text formed using BLOG_AUTHOR,\nBLOG_EMAIL, the date and LICENSE.  Note you need to use\nCONTENT_FOOTER_FORMATS instead of regular str.format or %-formatting,\nfor compatibility with the translatable settings feature.\nBODY_END\nThis option lets you define a HTML snippet that will be added at the bottom of body.\nThe main usage is a Google analytics snippet or something similar, but you can really\nput anything there. Good place for JavaScript.\nSOCIAL_BUTTONS_CODE\nThe SOCIAL_BUTTONS_CODE option lets you define a HTML snippet that will be added\nat the bottom of body. It defaults to a snippet for AddThis, but you can\nreally put anything there. See social_buttons.html for more details.\n\n\n\nAdding Files\nAny files you want to be in output/ but are not generated by Nikola (for example,\nfavicon.ico) just put it in files/. Everything there is copied into\noutput by the copy_files task. Remember that you can't have files that collide\nwith files Nikola generates (it will give an error).\n\nImportant\nDon't put any files manually in output/. Ever. Really. Maybe someday Nikola\nwill just wipe output/ and then you will be sorry. So, please don't do that.\n\nIf you want to copy more than one folder of static files into output you can\nchange the FILES_FOLDERS option:\n\n# One or more folders containing files to be copied as-is into the output.\n# The format is a dictionary of \"source\" \"relative destination\".\n# Default is:\n# FILES_FOLDERS = {'files': '' }\n# Which means copy 'files' into 'output'\n\n\n\nGetting More Themes\nThere are a few themes for Nikola. They are available at\nthe Themes Index.\nNikola has a built-in theme download/install mechanism to install those themes — the install_theme command:\n\n$ nikola install_theme -l\nThemes:\n-------\nblogtxt\nbootstrap3-gradients\n⋮\n⋮\n\n$ nikola install_theme blogtxt\n[2013-10-12T16:46:13Z] NOTICE: install_theme: Downloading:\nhttp://themes.getnikola.com/v6/blogtxt.zip\n[2013-10-12T16:46:15Z] NOTICE: install_theme: Extracting: blogtxt into themes\n\nAnd there you are, you now have themes/blogtxt installed. It's very\nrudimentary, but it should work in most cases.\nIf you create a nice theme, please share it!  You can do it as a pull\nrequest in the  GitHub repository.\nOne other option is to tweak an existing theme using a different color scheme,\ntypography and CSS in general. Nikola provides a bootswatch_theme option\nto create a custom theme by downloading free CSS files from http://bootswatch.com:\n\n$ nikola bootswatch_theme -n custom_theme -s spruce -p bootstrap3\n[2013-10-12T16:46:58Z] NOTICE: bootswatch_theme: Creating 'custom_theme' theme\nfrom 'spruce' and 'bootstrap3'\n[2013-10-12T16:46:58Z] NOTICE: bootswatch_theme: Downloading:\nhttp://bootswatch.com//spruce/bootstrap.min.css\n[2013-10-12T16:46:58Z] NOTICE: bootswatch_theme: Downloading:\nhttp://bootswatch.com//spruce/bootstrap.css\n[2013-10-12T16:46:59Z] NOTICE: bootswatch_theme: Theme created. Change the THEME setting to \"custom_theme\" to use it.\n\nYou can even try what different swatches do on an existing site using\ntheir handy bootswatchlet\nPlay with it, there's cool stuff there. This feature was suggested by\nclodo.\n\n\nDeployment\nNikola doesn't really have a concept of deployment. However, if you can specify your\ndeployment procedure as a series of commands, you can put them in the DEPLOY_COMMANDS\noption, and run them with nikola deploy.\nOne caveat is that if any command has a % in it, you should double them.\nHere is an example, from my own site's deployment script:\n\nDEPLOY_COMMANDS = [\n    'rsync -rav --delete output/ ralsina@lateral.netmanagers.com.ar:/srv/www/lateral',\n    'rdiff-backup output ~/blog-backup',\n    \"links -dump 'http://www.twingly.com/ping2?url=lateral.netmanagers.com.ar'\",\n]\n\nOther interesting ideas are using\ngit as a deployment mechanism (or any other VCS\nfor that matter), using lftp mirror or unison, or Dropbox.\nAny way you can think of to copy files from one place to another is good enough.\n\nDeploying to GitHub\nNikola provides a separate command github_deploy to deploy your\nsite to GitHub pages.  The command builds the site, commits the\noutput to a gh-pages branch and pushes the output to GitHub.\nThe branch to use for committing the sources can be changed using the\nGITHUB_DEPLOY_BRANCH option in your config.  For a\nuser.github.io/organization.github.io, this MUST be set to master,\nand the branch containing the sources must be changed to something\nelse, like deploy, using the GITHUB_SOURCE_BRANCH option.  The\nremote name to which the changes are pushed is origin by default,\nand can be changed using the GITHUB_REMOTE_NAME option.  You also,\nobviously, need to have git on your PATH, and should be able to\npush to the repository specified as the remote.\nThis command performs the following actions, when it is run:\n\nEnsure that your site is a git repository, and git is on the PATH.\nCheck for changes, and prompt the user to continue, if required.\nBuild the site\nClean any files that are \"unknown\" to Nikola.\nCreate a deploy branch, if one doesn't exist.\nCommit the output to this branch.  (NOTE: Any untracked source\nfiles, may get committed at this stage, on the wrong branch!)\nPush and deploy!\n\n\n\n\nComments and Annotations\nWhile Nikola creates static sites, there is a minimum level of user interaction you\nare probably expecting: comments.\nNikola supports several third party comment systems:\n\nDISQUS\nIntenseDebate\nLiveFyre\nMoot\nGoogle+\nFacebook\nisso\n\nBy default it will use DISQUS, but you can change by setting COMMENT_SYSTEM\nto one of \"disqus\", \"intensedebate\", \"livefyre\", \"moot\", \"googleplus\" or\n\"facebook\"\n\nCOMMENT_SYSTEM_ID\nThe value of COMMENT_SYSTEM_ID depends on what comment system you\nare using and you can see it in the system's admin interface.\n\nFor DISQUS it's called the shortname\nIn IntenseDebate it's the IntenseDebate site acct\nIn LiveFyre it's the siteId\nIn Moot it's your username\nFor Google Plus, COMMENT_SYSTEM_ID need not be set, but you must\nverify your authorship\nFor Facebook, you need to create an app\n<https://developers.facebook.com/apps> (turn off sandbox mode!)\nand get an App ID\nFor isso, it is the URL of isso (must be world-accessible and have a trailing slash,\ndefault http://localhost:8080/)\n\n\nTo use comments in a visible site, you should register with the service and\nthen set the COMMENT_SYSTEM_ID option.\nI recommend 3rd party comments, and specially DISQUS because:\n\nIt doesn't require any server-side software on your site\nThey offer you a way to export your comments, so you can take\nthem with you if you need to.\nIt's free.\nIt's damn nice.\n\nYou can disable comments for a post by adding a \"nocomments\" metadata field to it:\n\n.. nocomments: True\n\n\nDISQUS Support\nIn some cases, when you run the test site, you won't see the comments.\nThat can be fixed by adding the disqus_developer flag to the templates\nbut it's probably more trouble than it's worth.\n\n\nMoot Support\nMoot doesn't support comment counts on index pages, and it requires adding\nthis to your conf.py:\n\nBODY_END = \"\"\"\n<script src=\"//cdn.moot.it/1/moot.min.js\"></script>\n\"\"\"\nEXTRA_HEAD_DATA = \"\"\"\n<link rel=\"stylesheet\" type=\"text/css\" href=\"//cdn.moot.it/1/moot.css\">\n<meta name=\"viewport\" content=\"width=device-width\">\n<meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\">\n\"\"\"\n\n\n\nFacebook Support\nYou need jQuery, but not because Facebook wants it (see Issue\n#639).\n\nAn alternative or complement to comments are annotations. Nikola integrates\nthe annotation service provided by AnnotateIt.\nTo use it, set the ANNOTATIONS option to True. This is specially useful\nif you want feedback on specific parts of your writing.\nYou can enable or disable annotations for specific posts or pages using the\nannotations and noannotations metadata.\nAnnotations require JQuery and are therefore not supported in the base theme.\nYou can check bootstrap theme's base.html for details on how to handle them in\ncustom themes.\n\n\nImage Galleries\nTo create an image gallery, all you have to do is add a folder inside galleries,\nand put images there. Nikola will take care of creating thumbnails, index page, etc.\nIf you click on images on a gallery, you should see a bigger image, thanks to\nthe excellent colorbox\nThe gallery pages are generated using the gallery.tmpl template, and you can\ncustomize it there (you could switch to another lightbox instead of colorbox, change\nits settings, change the layout, etc.).\nThe conf.py options affecting gallery pages are these:\n\n# Galleries are folders in galleries/\n# Final location of galleries will be output / GALLERY_PATH / gallery_name\nGALLERY_PATH = \"galleries\"\nTHUMBNAIL_SIZE = 180\nMAX_IMAGE_SIZE = 1280\nUSE_FILENAME_AS_TITLE = True\nGALLERY_SORT_BY_DATE = False\nEXTRA_IMAGE_EXTENSIONS = []\n\nIf you add a file in galleries/gallery_name/index.txt its contents will be\nconverted to HTML and inserted above the images in the gallery page. The\nformat is the same as for posts.\nIf you add some image filenames in galleries/gallery_name/exclude.meta, they\nwill be excluded in the gallery page.\nIf USE_FILENAME_AS_TITLE is True the filename (parsed as a readable string)\nis used as the photo caption. If the filename starts with a number, it will\nbe stripped. For example 03_an_amazing_sunrise.jpg will be render as An amazing sunrise.\nHere is a demo gallery of historic, public domain Nikola\nTesla pictures taken from this site.\n\n\nPost Processing Filters\nYou can apply post processing to the files in your site, in order to optimize them\nor change them in arbitrary ways. For example, you may want to compress all CSS\nand JS files using yui-compressor.\nTo do that, you can use the provided helper adding this in your conf.py:\n\nfrom nikola import filters\n\nFILTERS = {\n  \".css\": [filters.yui_compressor],\n  \".js\": [filters.yui_compressor],\n}\n\nWhere filters.yui_compressor is a helper function provided by Nikola. You can\nreplace that with strings describing command lines, or arbitrary python functions.\nIf there's any specific thing you expect to be generally useful as a filter, contact\nme and I will add it to the filters library so that more people use it.\nThe currently available filters are:\n\nCreating your own filters\nYou can use any program name that works in place as a filter, like sed -i\nand you can use arbitrary python functions as filters, too.\nIf your program doesn't run in-place, then you can use Nikola's runinplace function.\nFor example, this is how the yui_compressor filter is implemented:\n\ndef yui_compressor(infile):\n    return runinplace(r'yui-compressor --nomunge %1 -o %2', infile)\n\nYou can turn any function into a filter using apply_to_file.\nAs a silly example, this would make everything uppercase and totally break\nyour website:\n\nimport string\nfrom nikola.filters import apply_to_file\nFILTERS = {\n  \".html\": [apply_to_file(string.upper)]\n}\n\n\n\nminify_lines\nStrips leading whitespace and blank lines. Useful for compacting HTML but pre-formatted text must be escaped manually.\nyui_compressor\nCompress CSS/JavaScript using YUI compressor\nclosure_compiler\nCompile, compress, and optimize JavaScript Google Closure Compiler\noptipng\nCompress PNG files using optipng\njpegoptim\nCompress JPEG files using jpegoptim\ntypogrify\nImprove typography using typogrify\n\n\n\nOptimizing Your Website\nOne of the main goals of Nikola is to make your site fast and light. So here are a few\ntips we have found when setting up Nikola with Apache. If you have more, or\ndifferent ones, or about other web servers, please share!\n\nUse a speed testing tool. I used Yahoo's YSlow but you can use any of them, and\nit's probably a good idea to use more than one.\n\nEnable compression in Apache:\n\nAddOutputFilterByType DEFLATE text/html text/plain text/xml text/css text/javascript\n\n\nIf even after you did the previous step the CSS files are not sent compressed:\n\nAddType text/css .css\n\n\nOptionally you can create static compressed copies and save some CPU on your server\nwith the GZIP_FILES option in Nikola.\n\nThe webassets Nikola plugin can drastically decrease the number of CSS and JS files your site fetches.\n\nThrough the filters feature, you can run your files through arbitrary commands, so that images\nare recompressed, JavaScript is minimized, etc.\n\nThe USE_CDN option offloads standard JavaScript and CSS files to a CDN so they are not\ndownloaded from your server.\n\n\n\n\nreStructuredText Extensions\nNikola includes support for a few directives and roles that are not part of docutils, but which\nwe think are handy for website development.\n\nMathJax\nNikola supports math input via MathJax.  It uses the usual math roles and\ndirectives of reStructuredText.\nIn order to use them in your posts, you must add the special mathjax tag.\nInline mathematics (equivalent to single dollar signs or backslash-parentheses\nin LaTeX) are produced using the math role:\nEuler’s formula: \\(e^{ix} = \\cos x + i\\sin x\\)\n\nEuler’s formula: :math:`e^{ix} = \\cos x + i\\sin x`\n\nDisplay mathematics (equivalent to double dollar signs or backslash-brackets in\nLaTeX) are produced using the math directive:\n\n\\begin{equation*}\n\\int \\frac{dx}{1+ax}=\\frac{1}{a}\\ln(1+ax)+C\n\\end{equation*}\n\n\n.. math::\n\n   \\int \\frac{dx}{1+ax}=\\frac{1}{a}\\ln(1+ax)+C\n\n\n\nMedia\nThis directive lets you embed media from a variety of sites automatically by just passing the\nURL of the page.  For example here are two random videos:\n\n.. media:: http://vimeo.com/72425090\n\n.. youtube:: http://www.youtube.com/watch?v=wyRpAat5oz0\n\nIt supports Instagram, Flickr, Github gists, Funny or Die, and dozens more, thanks to Micawber\n\n\nYouTube\nTo link to a YouTube video, you need the id of the video. For example, if the\nURL of the video is http://www.youtube.com/watch?v=8N_tupPBtWQ what you need is\n8N_tupPBtWQ\nOnce you have that, all you need to do is:\n\n.. youtube:: 8N_tupPBtWQ\n\n\n\nVimeo\nTo link to a Vimeo video, you need the id of the video. For example, if the\nURL of the video is http://www.vimeo.com/20241459 then the id is 20241459\nOnce you have that, all you need to do is:\n\n.. vimeo:: 20241459\n\nIf you have internet connectivity when generating your site, the height and width of\nthe embedded player will be set to the native height and width of the video.\nYou can override this if you wish:\n\n.. vimeo:: 20241459\n   :height: 240\n   :width: 320\n\n\n\nSoundcloud\nThis directive lets you share music from http://soundcloud.com You first need to get the\nID for the piece, which you can find in the \"share\" link. For example, if the\nWordPress code starts like this:\n\n[soundcloud url=\"http://api.soundcloud.com/tracks/78131362\"\n\nThe ID is 78131362 and you can embed the audio with this:\n\n.. soundcloud:: 78131362\n\nYou can also embed playlists, via the soundcloud_playlist directive which works the same way.\n\n\n\n\n\nCode\nThe code directive has been included in docutils since version 0.9 and now\nreplaces Nikola's code-block directive. To ease the transition, two aliases\nfor code directive are provided: code-block and sourcecode:\n\n.. code-block:: python\n   :number-lines:\n\n   print(\"Our virtues and our failings are inseparable\")\n\n\n\nListing\nTo use this, you have to put your source code files inside listings or whatever your\nLISTINGS_FOLDER variable is set to. Assuming you have a foo.py inside that folder:\n\n.. listing:: foo.py python\n\nWill include the source code from foo.py, highlight its syntax in python mode,\nand also create a listings/foo.py.html page and the listing will have a title linking to it.\nListings support the same options reST includes support (including\nvarious options for controlling which parts of the file are included), and also\na linenos option for Sphinx compatibility.\n\nNote\nFormerly, start-at and end-at options were supported; however,\nthey do not work anymore (since v6.1.0) and you should now use start-after\nand end-before, respectively.  You can also use start-line and\nend-line.\n\n\n\nGist\nYou can easily embed GitHub gists with this directive, like this:\n\n.. gist:: 2395294\n\nProducing this:\n\n#include <stdlib.h>\n#include <stdio.h>\n\nint nonHeapInt;\n\nstruct HeapObject\n{\n    int x;  // å çºå¦ææ¾ x ç pointerï¼å¯¦éä¸åæ¾ HeapObject çéé ­ pointer ç¸åï¼\n            // æä»¥æåå¿éå ä¸åyï¼è®æåæå® pointer æä¸ææå° HeapObject çéé ­ã\n    int y;\n};\n\nint main()\n{\n    struct HeapObject * heapObject = malloc(sizeof(struct HeapObject));\n\n    nonHeapInt = 10;\n    heapObject->y = 20;\n\n    printf(\"Start nonHeapInt:%d\\n\", nonHeapInt);\n    printf(\"Start heapObject->y:%d\\n\", heapObject->y);\n\n    // free(&nonHeapInt); // GCC æè­¦åï¼å·è¡ glibc æä¸ invalid pointer exception\n    // free(&(heapObject->y)); // éç¶ä¸ææ¯åï¼ä½ glibc éæ¯æä¸ invalid pointer exception\n\n    printf(\"End nonHeapInt:%d\\n\", nonHeapInt);\n    printf(\"End heapObject->y:%d\\n\", heapObject->y);\n\n}\n\n\nThis degrades gracefully if the browser doesn't support JavaScript.\n\n\nSlideshows\nTo create an image slideshow, you can use the slides directive. For example:\n\n.. slides::\n\n   /galleries/demo/tesla_conducts_lg.jpg\n   /galleries/demo/tesla_lightning2_lg.jpg\n   /galleries/demo/tesla4_lg.jpg\n   /galleries/demo/tesla_lightning1_lg.jpg\n   /galleries/demo/tesla_tower1_lg.jpg\n\n\n\nChart\nThis directive is a thin wrapper around Pygal and will produce charts\nas SVG files embedded directly in your pages.\nHere's an example of how it works:\n\n.. chart:: Bar\n   :title: 'Browser usage evolution (in %)'\n   :x_labels: [\"2002\", \"2003\", \"2004\", \"2005\", \"2006\", \"2007\"]\n\n   'Firefox', [None, None, 0, 16.6, 25, 31]\n   'Chrome',  [None, None, None, None, None, None]\n   'IE',      [85.8, 84.6, 84.7, 74.5, 66, 58.6]\n   'Others',  [14.2, 15.4, 15.3, 8.9, 9, 10.4]\n\nThe argument passed next to the directive (Bar in that example) is the type of chart, and can be one of\nLine, StackedLine, Bar, StackedBar, HorizontalBar, XY, DateY, Pie, Radar, Dot, Funnel, Gauge, Pyramid. For\nexamples of what each kind of graph is, check here\nIt can take a lot of options to let you customize the charts (in the example, title and x_labels).\nYou can use any option described in the pygal docs\nFinally, the content of the directive is the actual data, in the form of a label and\na list of values, one series per line.\n\n\nDoc\nThis role is useful to make links to other post or page inside the same site.\nHere's an example:\n\nTake a look at :doc:`my other post <creating-a-theme>` about theme creating.\n\nIn this case we are giving the portion of text we want to link. So, the result will be:\n\nTake a look at my other post about theme creating.\nIf we want to use the post's title as the link's text, just do:\n\nTake a look at :doc:`creating-a-theme` to know how to do it.\n\nand it will produce:\n\nTake a look at Creating a Theme to know how to do it.\n\n\nPost List\nThis directive can be used to generate a list of posts. You could use it, for\nexample, to make a list of the latest 5 blog posts, or a list of all blog posts\nwith the tag nikola:\n\nHere are my 5 latest and greatest blog posts:\n\n.. post-list::\n   :start: -5\n\nThese are all my posts about Nikola:\n\n.. post-list::\n   :tags: nikola\n\nNote that you can give the tags option a comma-separated list of tags, in\nwhich case the list will show all posts that have at least one of those tags.\nOther interesting options include stop (set it to -1, for example, to\nshow all but the last post); reverse (set to True to sort the list in\nchronological order, instead of the default latest-post-first); lang\n(language to use for post titles and links); and slugs (allows you to filter\nby post slugs, instead of tags).\nThe post list directive uses the post_list_directive.tmpl template file (or\nanother one, if you use the template option) to generate the list's HTML. By\ndefault, this is an unordered list with dates and clickable post titles. See\nthe template file in Nikola's base theme for an example of how this works.\n\n\n\nImporting Your WordPress Site Into Nikola\nIf you like Nikola, and want to start using it, but you have a WordPress blog, Nikola\nsupports importing it. Here's the steps to do it:\n\nGet a XML dump of your site [1]\nnikola import_wordpress mysite.wordpress.2012-12-20.xml\n\nAfter some time, this will create a new_site folder with all your data. It currently supports\nthe following:\n\nAll your posts and pages\n\nKeeps \"draft\" status\n\nYour tags and categories\n\nImports your attachments and fixes links to point to the right places\n\nWill try to add redirects that send the old post URLs to the new ones\n\nWill give you a url_map so you know where each old post was\nThis is also useful for DISQUS thread migration!\n\nWill try to convert the content of your posts. This is not error free, because\nWordPress uses some unholy mix of HTML and strange things. Currently we are treating it\nas markdown, which does a reasonable job of it.\nYou will find your old posts in new_site/posts/post-title.wp in case you need to fix\nany of them.\n\n\nThis feature is a work in progress, and the only way to improve it is to have it used for\nas many sites as possible and make it work better each time, so I am happy to get requests\nabout it.\n\n\n\n[1]The dump needs to be in 1.2 format. You can check by reading it, it should say\nxmlns:excerpt=\"http://wordpress.org/export/1.2/excerpt/\" near the top of the\nfile. If it says 1.1 instead of 1.2 you will have to update your\nWordPress before dumping.\nOther versions may or may not work.\n\n\n\n\nImporting To A Custom Location Or Into An Existing Site\nIt is possible to either import into a location you desire or into an already existing Nikola site.\nTo do so you can specify a location after the dump.:\n\n$ nikola import_wordpress  mysite.wordpress.2012-12-20.xml -o import_location\n\nWith this command Nikola will import into the folder import_location.\nIf the folder already exists Nikola will not overwrite an existing conf.py.\nInstead a new file with a timestamp at the end of the filename will be created.\n\n\n\nUsing Twitter Cards\nTwitter Cards enable you to show additional information in Tweets that link\nto you content.\nNikola supports Twitter Cards.\nThey are implemented to use Open Graph tags whenever possible.\n\nImportant\nTo use Twitter Cards you need to opt-in on Twitter.\nTo do so please use the form that can be found at https://dev.twitter.com/form/participate-twitter-cards\n\nTo enable and configure your use of Twitter Cards please modify the\ncorresponding lines in your conf.py.\nAn example configuration that uses the Twitter nickname of the website\nand the authors Twitter user ID is found below.\n\nTWITTER_CARD = {\n    'use_twitter_cards': True,  # enable Twitter Cards / Open Graph\n    'site': '@website',  # twitter nick for the website\n    # 'site:id': 123456,  # Same as site, but the website's Twitter user ID instead.\n    # 'creator': '@username',  # Username for the content creator / author.\n    'creator:id': 654321,  # Same as creator, but the Twitter user's ID.\n}\n\n\n\nCustom Plugins\nYou can create your own plugins (see Extending Nikola) and use them in your own\nsite by putting them in a plugins/ folder.  You can also put them in\ndirectories listed in the EXTRA_PLUGINS_DIRS configuration variable.\n\n\nGetting Extra Plugins\nIf you want extra plugins, there is also the Plugins Index.\nSimilarly to themes, there is a nice, built-in command to manage them —\nplugin:\n\n$ nikola plugin -l\nPlugins:\n--------\nhelloworld\ntags\n⋮\n⋮\n\n$ nikola plugin --install helloworld\n[2013-10-12T16:51:56Z] NOTICE: install_plugin: Downloading: http://plugins.getnikola.com/v6/helloworld.zip\n[2013-10-12T16:51:58Z] NOTICE: install_plugin: Extracting: helloworld into plugins\nplugins/helloworld/requirements.txt\n[2013-10-12T16:51:58Z] NOTICE: install_plugin: This plugin has Python dependencies.\n[2013-10-12T16:51:58Z] NOTICE: install_plugin: Installing dependencies with pip...\n⋮\n⋮\n[2013-10-12T16:51:59Z] NOTICE: install_plugin: Dependency installation succeeded.\n[2013-10-12T16:51:59Z] NOTICE: install_plugin: This plugin has a sample config file.\nContents of the conf.py.sample file:\n\n    # Should the Hello World plugin say “BYE” instead?\n    BYE_WORLD = False\n\nThen you also can uninstall your plugins:\n\n$ nikola plugin --uninstall tags\n[2014-04-15T08:59:24Z] WARNING: plugin: About to uninstall plugin: tags\n[2014-04-15T08:59:24Z] WARNING: plugin: This will delete /home/ralsina/foo/plugins/tags\nAre you sure? [y/n] y\n[2014-04-15T08:59:26Z] WARNING: plugin: Removing /home/ralsina/foo/plugins/tags\n\nAnd upgrade them:\n\n$ nikola plugin --upgrade\n[2014-04-15T09:00:18Z] WARNING: plugin: This is not very smart, it just reinstalls some plugins and hopes for the best\nWill upgrade 1 plugins: graphviz\nUpgrading graphviz\n[2014-04-15T09:00:20Z] INFO: plugin: Downloading: http://plugins.getnikola.com/v7/graphviz.zip\n[2014-04-15T09:00:20Z] INFO: plugin: Extracting: graphviz into /home/ralsina/.nikola/plugins/\n[2014-04-15T09:00:20Z] NOTICE: plugin: This plugin has third-party dependencies you need to install manually.\nContents of the requirements-nonpy.txt file:\n\n    Graphviz\n        http://www.graphviz.org/\n\nYou have to install those yourself or through a package manager.\n\nYou can also share plugins you created with the community!  Visit the\nGitHub repository to find out more.\nYou can use the plugins in this repository without installing them into your\nsite, by cloning the repository and adding the path of the plugins directory to\nthe EXTRA_PLUGINS_DIRS list in your configuration.\n\n\nShell Tab Completion\nSince Nikola is a command line tool, and this is the 21st century, it's handy to have smart tab-completion\nso that you don't have to type the full commands.\nTo enable this, you can use the nikola tabcompletion command like this, depending on your shell:\n\n$ nikola tabcompletion --shell bash --hardcode-tasks > _nikola_bash\n$ nikola tabcompletion --shell zsh --hardcode-tasks > _nikola_zsh\n\nThe --hardcode-tasks adds tasks to the completion and may need updating periodically.\n\n\nLicense\nNikola is released under a MIT license which\nis a free software license. Some components shipped along with Nikola, or required by it are\nreleased under other licenses.\nIf you are not familiar with free software licensing: In general, you should be able to\ndo pretty much anything you want, unless you modify Nikola. If you modify it, and share\nit with someone else, that someone else should get all your modifications under the same\nlicense you got it.",
  "text_teaser": null,
  "iso_date": "2012-03-30T23:00:00-03:00",
  "next_post": null
}