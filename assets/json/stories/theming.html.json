{
  "abs_permalink": "http://getnikola.com/stories/theming.html",
  "template_name": "story.tmpl",
  "meta": {
    "description": "",
    "tags": "",
    "title": "Theming Nikola",
    "author": "",
    "template": "",
    "date": "2012-03-13 12:00:00 UTC-03:00",
    "password": "",
    "type": "text",
    "slug": "theming"
  },
  "sourcelink": "/stories/theming.rst",
  "id": "/stories/theming.html.json",
  "author": "Nikola Tesla",
  "use_in_feeds": false,
  "translated_to": [],
  "text": "<div><table class=\"docinfo\" frame=\"void\" rules=\"none\">\n<col class=\"docinfo-name\">\n<col class=\"docinfo-content\">\n<tbody valign=\"top\">\n<tr><th class=\"docinfo-name\">Version:</th>\n<td>7.1.0</td></tr>\n<tr><th class=\"docinfo-name\">Author:</th>\n<td>Roberto Alsina &lt;<a class=\"reference external\" href=\"mailto:ralsina@netmanagers.com.ar\">ralsina@netmanagers.com.ar</a>&gt;</td></tr>\n</tbody>\n</table>\n<div class=\"contents alert alert-info pull-right topic\" id=\"contents\">\n<p class=\"topic-title first\">Contents</p>\n<ul class=\"simple\">\n<li><a class=\"reference internal\" href=\"/stories/theming.html#the-structure\" id=\"id1\">The Structure</a></li>\n<li><a class=\"reference internal\" href=\"/stories/theming.html#templates\" id=\"id2\">Templates</a></li>\n<li><a class=\"reference internal\" href=\"/stories/theming.html#messages-and-translations\" id=\"id3\">Messages and Translations</a></li>\n<li><a class=\"reference internal\" href=\"/stories/theming.html#less-and-sass\" id=\"id4\">LESS and Sass</a></li>\n</ul>\n</div>\n<p class=\"lead\">This document is a reference about themes. If you want a tutorial, please read\n<a class=\"reference external\" href=\"/stories/creating-a-theme.html\">Creating a Theme</a></p>\n<div class=\"section\" id=\"the-structure\">\n<h2><a class=\"toc-backref\" href=\"/stories/theming.html#id1\">The Structure</a></h2>\n<p>Themes are located in the <tt class=\"docutils literal\">themes</tt> folder where Nikola is installed, and in the <tt class=\"docutils literal\">themes</tt> folder\nof your site, one folder per theme. The folder name is the theme name.</p>\n<p>A Nikola theme consists of the following folders (they are <em>all</em> optional):</p>\n<dl class=\"docutils\">\n<dt>assets</dt>\n<dd><p class=\"first\">This is where you would put your CSS, Javascript and image files. It will be copied\ninto <tt class=\"docutils literal\">output/assets</tt> when you build the site, and the templates will contain\nreferences to them.</p>\n<p>The included themes use <a class=\"reference external\" href=\"http://twitter.github.com/bootstrap/\">Bootstrap</a>\nand <a class=\"reference external\" href=\"http://www.jacklmoore.com/colorbox\">Colorbox</a> so they are in assets,\nalong with CSS files for syntax highligting and reStructuredText, and a\nminified copy of jQuery.</p>\n<p class=\"last\">If you want to base your theme on other frameworks (or on no framework at all)\njust remember to put there everything you need for deployment.</p>\n</dd>\n<dt>templates</dt>\n<dd>This contains the templates used to generate the pages. While Nikola will use a\ncertain set of template names by default, you can add others for specific parts\nof your site.</dd>\n<dt>messages</dt>\n<dd>Nikola tries to be multilingual. This is where you put the strings for your theme\nso that it can be translated into other languages.</dd>\n<dt>less</dt>\n<dd>Files to be compiled into CSS using <a class=\"reference external\" href=\"http://lesscss.org/\">LESS</a></dd>\n<dt>sass</dt>\n<dd>Files to be compiled into CSS using <a class=\"reference external\" href=\"http://sass-lang.com/\">Sass</a></dd>\n</dl>\n<p>This mandatory file:</p>\n<dl class=\"docutils\">\n<dt>parent</dt>\n<dd><p class=\"first\">A text file that, on its first line, contains the name of the <strong>parent theme</strong>.\nAny resources missing on this theme, will be looked up in the parent theme\n(and then in the grandparent, etc).</p>\n<p>The <tt class=\"docutils literal\">parent</tt> is so you don't have to create a full theme each time: just create an\nempty theme, set the parent, and add the bits you want modified.</p>\n<p>I recommend this:</p>\n<ul class=\"last simple\">\n<li>If your theme uses bootstrap, inherit the <tt class=\"docutils literal\">bootstrap</tt> theme.</li>\n<li>If your theme uses bootstrap3, inherit the <tt class=\"docutils literal\">bootstrap3</tt> theme.</li>\n<li>If your theme uses Jinja as a template engine, inherit <tt class=\"docutils literal\"><span class=\"pre\">base-jinja</span></tt>\nor <tt class=\"docutils literal\"><span class=\"pre\">bootstrap-jinja</span></tt> (available at <a class=\"reference external\" href=\"http://themes.nikola.ralsina.com.ar\">http://themes.nikola.ralsina.com.ar</a>)</li>\n<li>In any other case, inherit <tt class=\"docutils literal\">base</tt>.</li>\n</ul>\n</dd>\n</dl>\n<p>And these optional files:</p>\n<dl class=\"docutils\">\n<dt>engine</dt>\n<dd>A text file which, on the first line, contains the name of the template engine\nthis theme needs. Currently supported values are \"mako\" and \"jinja\".</dd>\n<dt>bundles</dt>\n<dd><p class=\"first\">A text file containing a list of files to be turned into bundles using WebAssets.\nFor example:</p>\n<pre class=\"literal-block\">\nassets/css/all.css=bootstrap.css,bootstrap-responsive.css,rst.css,code.css,colorbox.css,custom.css\n</pre>\n<p>This creates a file called \"assets/css/all.css\" in your output that is the\ncombination of all the other file paths, relative to the output file.\nThis makes the page much more efficient because it avoids multiple connections to the server,\nat the cost of some extra difficult debugging.</p>\n<p>WebAssets supports bundling CSS and JS files.</p>\n<p class=\"last\">Templates should use either the bundle or the individual files based on the <tt class=\"docutils literal\">use_bundles</tt>\nvariable, which in turn is set by the <tt class=\"docutils literal\">USE_BUNDLES</tt> option.</p>\n</dd>\n</dl>\n</div>\n<div class=\"section\" id=\"templates\">\n<h2><a class=\"toc-backref\" href=\"/stories/theming.html#id2\">Templates</a></h2>\n<p>In templates there is a number of files whose name ends in <tt class=\"docutils literal\">.tmpl</tt>. Those are the\ntheme's page templates. They are done using the <a class=\"reference external\" href=\"http://makotemplates.org\">Mako</a>\nor <a class=\"reference external\" href=\"http://jinja.pocoo.org\">Jinja2</a> template languages. If you want to do a theme, you\nshould learn one first. What engine is used by the theme is declared in the <tt class=\"docutils literal\">engine</tt> file.</p>\n<p>The rest of this document explains Mako templates, but Jinja2 is fairly similar.</p>\n<p>Mako has a nifty concept of template inheritance. That means that, a\ntemplate can inherit from another and only change small bits of the output. For example,\n<tt class=\"docutils literal\">base.tmpl</tt> defines the whole layout for a page but has only a placeholder for content\nso <tt class=\"docutils literal\">post.tmpl</tt> only define the content, and the layout is inherited from <tt class=\"docutils literal\">base.tmpl</tt>.</p>\n<p>These are the templates that come with the included themes:</p>\n<dl class=\"docutils\">\n<dt><tt class=\"docutils literal\">base.tmpl</tt></dt>\n<dd><p class=\"first\">This template defines the basic page layout for the site. It's mostly plain HTML\nbut defines a few blocks that can be re-defined by inheriting templates.</p>\n<p class=\"last\">It has some separate pieces defined in <tt class=\"docutils literal\">base_helper.tmpl</tt> so they can be\neasily overriden. For example, the Bootstrap theme adds a <tt class=\"docutils literal\">bootstrap_helper.tmpl</tt>\nand then uses it to override things defined in base theme's <tt class=\"docutils literal\">base_helper.tmpl</tt></p>\n</dd>\n<dt><tt class=\"docutils literal\">index.tmpl</tt></dt>\n<dd>Template used to render the multipost indexes. The posts are in a <tt class=\"docutils literal\">posts</tt> variable.\nSome functionality is in the <tt class=\"docutils literal\">index_helper.tmpl</tt> helper template.</dd>\n<dt><tt class=\"docutils literal\">comments_helper.tmpl</tt></dt>\n<dd>This template handles comments. You should probably never touch it :-)\nIt uses a bunch of helper templates, one for each supported comment system:\n<tt class=\"docutils literal\">disqus_helper.tmpl</tt> <tt class=\"docutils literal\">facebook_helper.tmpl</tt> <tt class=\"docutils literal\">googleplus_helper.tmpl</tt>\n<tt class=\"docutils literal\">intensedebate_helper.tmpl</tt> <tt class=\"docutils literal\">isso_helper.tmpl</tt> <tt class=\"docutils literal\">livefyre_helper.tmpl</tt>\n<tt class=\"docutils literal\">moot_helper.tmpl</tt></dd>\n<dt><tt class=\"docutils literal\">crumbs.tmpl</tt> <tt class=\"docutils literal\">slides.tmpl</tt></dt>\n<dd>These templates help render specific UI items, and can be tweaked as needed.</dd>\n<dt><tt class=\"docutils literal\">gallery.tmpl</tt></dt>\n<dd><blockquote class=\"first\">\n<p>Template used for image galleries. Interesting data includes:</p>\n<ul class=\"simple\">\n<li><tt class=\"docutils literal\">text</tt>: A descriptive text for the gallery.</li>\n<li><tt class=\"docutils literal\">crumbs</tt>: A list of <tt class=\"docutils literal\">link, crumb</tt> to implement a crumbbar.</li>\n<li><tt class=\"docutils literal\">folders</tt>: A list of folders to implement hierarchical gallery navigation.</li>\n<li><tt class=\"docutils literal\">enable_comments</tt>: To enable/disable comments in galleries.</li>\n<li><tt class=\"docutils literal\">thumbnail_size</tt>: The <tt class=\"docutils literal\">THUMBNAIL_SIZE</tt> option.</li>\n<li><tt class=\"docutils literal\">photo_array</tt>: a list of dictionaries, each containing:<ul>\n<li><tt class=\"docutils literal\">url</tt>: URL for the full-sized image.</li>\n<li><tt class=\"docutils literal\">url_thumb</tt>: URL for the thumbnail.</li>\n<li><tt class=\"docutils literal\">title</tt>: The title of the image.</li>\n<li><tt class=\"docutils literal\">size</tt>: A dict containing <tt class=\"docutils literal\">w</tt> and <tt class=\"docutils literal\">h</tt>, the real size of the thumbnail.</li>\n</ul>\n</li>\n</ul>\n</blockquote>\n<ul class=\"last simple\">\n<li><tt class=\"docutils literal\">photo_array_json</tt>: a JSON dump of photo_array, used in the bootstrap theme by flowr.js</li>\n</ul>\n</dd>\n<dt><tt class=\"docutils literal\">list.tmpl</tt></dt>\n<dd>Template used to display generic lists of links, which it gets in <tt class=\"docutils literal\">items</tt>,\na list of (text, link) elements.</dd>\n<dt><tt class=\"docutils literal\">list_post.tmpl</tt></dt>\n<dd>Template used to display generic lists of posts, which it gets in <tt class=\"docutils literal\">posts</tt>.</dd>\n<dt><tt class=\"docutils literal\">post.tmpl</tt></dt>\n<dd>Template used by default for blog posts, gets the data in a <tt class=\"docutils literal\">post</tt> object\nwhich is an instance of the Post class. Some functionality is in the\n<tt class=\"docutils literal\">post_helper.tmpl</tt> template.</dd>\n<dt><tt class=\"docutils literal\">story.tmpl</tt></dt>\n<dd>Used for pages that are not part of a blog, usually a cleaner, less\nintrusive layout than <tt class=\"docutils literal\">post.tmpl</tt>, but same parameters.</dd>\n<dt><tt class=\"docutils literal\">listing.tmpl</tt></dt>\n<dd>Used to display code listings.</dd>\n<dt><tt class=\"docutils literal\">tags.tmpl</tt></dt>\n<dd>Used to display the list of tags and categories. <tt class=\"docutils literal\">tag.tmpl</tt> is used to show the contents\nof a single tag or category.</dd>\n<dt><tt class=\"docutils literal\">tagindex.tmpl</tt></dt>\n<dd>Used to display tag indexes, if <tt class=\"docutils literal\">TAG_PAGES_ARE_INDEXES</tt> is True.\nBy default, it just inherits <tt class=\"docutils literal\">index.tmpl</tt>.</dd>\n</dl>\n<p>You can add other templates for specific pages, which the user can then use in his <tt class=\"docutils literal\">POSTS</tt>\nor <tt class=\"docutils literal\">PAGES</tt> option in <tt class=\"docutils literal\">conf.py</tt>. Also, keep in mind that your theme is yours,\nthere is no reason why you would need to maintain the inheritance as it is, or not\nrequire whatever data you want.</p>\n<p>Also, you can specify a custom template to be used by a post or page via the <tt class=\"docutils literal\">template</tt> metadata,\nand custom templates can be added in the <tt class=\"docutils literal\">templates/</tt> folder of your site.</p>\n</div>\n<div class=\"section\" id=\"messages-and-translations\">\n<h2><a class=\"toc-backref\" href=\"/stories/theming.html#id3\">Messages and Translations</a></h2>\n<p>The included themes are translated into a variety of languages. You can add your own translation\nat <a class=\"reference external\" href=\"https://www.transifex.com/projects/p/nikola/\">https://www.transifex.com/projects/p/nikola/</a></p>\n<p>If you want to create a theme that has new strings, and you want those strings to be translatable,\nthen your theme will need a custom <tt class=\"docutils literal\">messages</tt> folder.</p>\n</div>\n<div class=\"section\" id=\"less-and-sass\">\n<h2><a class=\"reference external\" href=\"http://lesscss.org/\">LESS</a> and <a class=\"reference external\" href=\"http://sass-lang.com/\">Sass</a></h2>\n<div class=\"note\">\n<p class=\"first admonition-title\">Note</p>\n<p class=\"last\">The LESS and Sass compilers will be moved to the Plugins Index in\nNikola v7.0.0.</p>\n</div>\n<p>If you want to use those CSS extensions, you can — just store your files\nin the <tt class=\"docutils literal\">less</tt> or <tt class=\"docutils literal\">sass</tt> directory of your theme.</p>\n<p>In order to have them work, you need to create a list of <tt class=\"docutils literal\">.less</tt> or\n<tt class=\"docutils literal\"><span class=\"pre\">.scss/.sass</span></tt> files to compile — the list should be in a file named\n<tt class=\"docutils literal\">targets</tt> in the respective directory (<tt class=\"docutils literal\">less</tt>/<tt class=\"docutils literal\">sass</tt>).</p>\n<p>The files listed in the <tt class=\"docutils literal\">targets</tt> file will be passed to the respective\ncompiler, which you have to install manually (<tt class=\"docutils literal\">lessc</tt> which comes from\nthe Node.js package named <tt class=\"docutils literal\">less</tt> or <tt class=\"docutils literal\">sass</tt> from a Ruby package aptly\nnamed <tt class=\"docutils literal\">sass</tt>).  Whatever the compiler outputs will be saved as a CSS\nfile in your rendered site, with the <tt class=\"docutils literal\">.css</tt> extension.</p>\n<div class=\"note\">\n<p class=\"first admonition-title\">Note</p>\n<p class=\"last\">Conflicts may occur if you have two files with the same base name\nbut a different extension.  Pay attention to how you name your files\nor your site won’t build!  (Nikola will tell you what’s wrong when\nthis happens)</p>\n</div>\n</div></div>",
  "is_mathjax": false,
  "enable_comments": false,
  "tags": [],
  "formatted_date": "2012-03-13 12:00",
  "date": "2012-03-13T12:00:00-03:00",
  "is_draft": false,
  "is_private": false,
  "prev_post": null,
  "permalink": "/stories/theming.html",
  "id_comments": "cache/stories/theming.html",
  "text_stripped": "Version:\n7.1.0\nAuthor:\nRoberto Alsina <ralsina@netmanagers.com.ar>\n\n\n\nContents\n\nThe Structure\nTemplates\nMessages and Translations\nLESS and Sass\n\n\nThis document is a reference about themes. If you want a tutorial, please read\nCreating a Theme\n\nThe Structure\nThemes are located in the themes folder where Nikola is installed, and in the themes folder\nof your site, one folder per theme. The folder name is the theme name.\nA Nikola theme consists of the following folders (they are all optional):\n\nassets\nThis is where you would put your CSS, Javascript and image files. It will be copied\ninto output/assets when you build the site, and the templates will contain\nreferences to them.\nThe included themes use Bootstrap\nand Colorbox so they are in assets,\nalong with CSS files for syntax highligting and reStructuredText, and a\nminified copy of jQuery.\nIf you want to base your theme on other frameworks (or on no framework at all)\njust remember to put there everything you need for deployment.\n\ntemplates\nThis contains the templates used to generate the pages. While Nikola will use a\ncertain set of template names by default, you can add others for specific parts\nof your site.\nmessages\nNikola tries to be multilingual. This is where you put the strings for your theme\nso that it can be translated into other languages.\nless\nFiles to be compiled into CSS using LESS\nsass\nFiles to be compiled into CSS using Sass\n\nThis mandatory file:\n\nparent\nA text file that, on its first line, contains the name of the parent theme.\nAny resources missing on this theme, will be looked up in the parent theme\n(and then in the grandparent, etc).\nThe parent is so you don't have to create a full theme each time: just create an\nempty theme, set the parent, and add the bits you want modified.\nI recommend this:\n\nIf your theme uses bootstrap, inherit the bootstrap theme.\nIf your theme uses bootstrap3, inherit the bootstrap3 theme.\nIf your theme uses Jinja as a template engine, inherit base-jinja\nor bootstrap-jinja (available at http://themes.nikola.ralsina.com.ar)\nIn any other case, inherit base.\n\n\n\nAnd these optional files:\n\nengine\nA text file which, on the first line, contains the name of the template engine\nthis theme needs. Currently supported values are \"mako\" and \"jinja\".\nbundles\nA text file containing a list of files to be turned into bundles using WebAssets.\nFor example:\n\nassets/css/all.css=bootstrap.css,bootstrap-responsive.css,rst.css,code.css,colorbox.css,custom.css\n\nThis creates a file called \"assets/css/all.css\" in your output that is the\ncombination of all the other file paths, relative to the output file.\nThis makes the page much more efficient because it avoids multiple connections to the server,\nat the cost of some extra difficult debugging.\nWebAssets supports bundling CSS and JS files.\nTemplates should use either the bundle or the individual files based on the use_bundles\nvariable, which in turn is set by the USE_BUNDLES option.\n\n\n\n\nTemplates\nIn templates there is a number of files whose name ends in .tmpl. Those are the\ntheme's page templates. They are done using the Mako\nor Jinja2 template languages. If you want to do a theme, you\nshould learn one first. What engine is used by the theme is declared in the engine file.\nThe rest of this document explains Mako templates, but Jinja2 is fairly similar.\nMako has a nifty concept of template inheritance. That means that, a\ntemplate can inherit from another and only change small bits of the output. For example,\nbase.tmpl defines the whole layout for a page but has only a placeholder for content\nso post.tmpl only define the content, and the layout is inherited from base.tmpl.\nThese are the templates that come with the included themes:\n\nbase.tmpl\nThis template defines the basic page layout for the site. It's mostly plain HTML\nbut defines a few blocks that can be re-defined by inheriting templates.\nIt has some separate pieces defined in base_helper.tmpl so they can be\neasily overriden. For example, the Bootstrap theme adds a bootstrap_helper.tmpl\nand then uses it to override things defined in base theme's base_helper.tmpl\n\nindex.tmpl\nTemplate used to render the multipost indexes. The posts are in a posts variable.\nSome functionality is in the index_helper.tmpl helper template.\ncomments_helper.tmpl\nThis template handles comments. You should probably never touch it :-)\nIt uses a bunch of helper templates, one for each supported comment system:\ndisqus_helper.tmpl facebook_helper.tmpl googleplus_helper.tmpl\nintensedebate_helper.tmpl isso_helper.tmpl livefyre_helper.tmpl\nmoot_helper.tmpl\ncrumbs.tmpl slides.tmpl\nThese templates help render specific UI items, and can be tweaked as needed.\ngallery.tmpl\n\nTemplate used for image galleries. Interesting data includes:\n\ntext: A descriptive text for the gallery.\ncrumbs: A list of link, crumb to implement a crumbbar.\nfolders: A list of folders to implement hierarchical gallery navigation.\nenable_comments: To enable/disable comments in galleries.\nthumbnail_size: The THUMBNAIL_SIZE option.\nphoto_array: a list of dictionaries, each containing:\nurl: URL for the full-sized image.\nurl_thumb: URL for the thumbnail.\ntitle: The title of the image.\nsize: A dict containing w and h, the real size of the thumbnail.\n\n\n\n\n\nphoto_array_json: a JSON dump of photo_array, used in the bootstrap theme by flowr.js\n\n\nlist.tmpl\nTemplate used to display generic lists of links, which it gets in items,\na list of (text, link) elements.\nlist_post.tmpl\nTemplate used to display generic lists of posts, which it gets in posts.\npost.tmpl\nTemplate used by default for blog posts, gets the data in a post object\nwhich is an instance of the Post class. Some functionality is in the\npost_helper.tmpl template.\nstory.tmpl\nUsed for pages that are not part of a blog, usually a cleaner, less\nintrusive layout than post.tmpl, but same parameters.\nlisting.tmpl\nUsed to display code listings.\ntags.tmpl\nUsed to display the list of tags and categories. tag.tmpl is used to show the contents\nof a single tag or category.\ntagindex.tmpl\nUsed to display tag indexes, if TAG_PAGES_ARE_INDEXES is True.\nBy default, it just inherits index.tmpl.\n\nYou can add other templates for specific pages, which the user can then use in his POSTS\nor PAGES option in conf.py. Also, keep in mind that your theme is yours,\nthere is no reason why you would need to maintain the inheritance as it is, or not\nrequire whatever data you want.\nAlso, you can specify a custom template to be used by a post or page via the template metadata,\nand custom templates can be added in the templates/ folder of your site.\n\n\nMessages and Translations\nThe included themes are translated into a variety of languages. You can add your own translation\nat https://www.transifex.com/projects/p/nikola/\nIf you want to create a theme that has new strings, and you want those strings to be translatable,\nthen your theme will need a custom messages folder.\n\n\nLESS and Sass\n\nNote\nThe LESS and Sass compilers will be moved to the Plugins Index in\nNikola v7.0.0.\n\nIf you want to use those CSS extensions, you can — just store your files\nin the less or sass directory of your theme.\nIn order to have them work, you need to create a list of .less or\n.scss/.sass files to compile — the list should be in a file named\ntargets in the respective directory (less/sass).\nThe files listed in the targets file will be passed to the respective\ncompiler, which you have to install manually (lessc which comes from\nthe Node.js package named less or sass from a Ruby package aptly\nnamed sass).  Whatever the compiler outputs will be saved as a CSS\nfile in your rendered site, with the .css extension.\n\nNote\nConflicts may occur if you have two files with the same base name\nbut a different extension.  Pay attention to how you name your files\nor your site won’t build!  (Nikola will tell you what’s wrong when\nthis happens)",
  "text_teaser": null,
  "iso_date": "2012-03-13T12:00:00-03:00",
  "next_post": null
}